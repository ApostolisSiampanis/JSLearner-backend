[
    {
        "level" : "BEGINNER",
        "title" : "Introduction",
        "description_short" : "Introduction to JavaScript",
        "description_long" : "This section introduces JavaScript, its history, and how to.",
        "lessons" : [
            {
                "title" : "What is JavaScript?",
                "theories_list" : [
                    "JavaScript, often abbreviated JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. It lets us add interactivity to pages e.g. you might have seen sliders, alerts, click interactions, popups, etc on different websites — all of that is built using JavaScript. Apart from being used in the browser, it is also used in other non-browser environments as well, such as Node.js for writing server-side code in JavaScript, Electron for writing desktop applications, React Native for mobile applications, and so on."
                ],
                "description" : "",
                "url" : "",
                "questions" : null
            },
            {
                "title" : "History of JavaScript",
                "theories_list" : [
                    "JavaScript was initially created by Brendan Eich of NetScape and was first announced in a press release by Netscape in 1995. It has a bizarre history of naming; initially, it was named Mocha by the creator, which was later renamed LiveScript. In 1996, about a year later after the release, NetScape decided to rename it to JavaScript with hopes of capitalizing on the Java community (although JavaScript did not have any relationship with Java) and released Netscape 2.0 with the official support of JavaScript."
                ],
                "description" : "",
                "url" : "",
                "questions" : null
            },
            {
                "title" : "How to run JavaScript?",
                "theories_list" : [
                    "JavaScript can be run in the browser by including the external script file using the script tag, writing it within the HTML page using the script tag again, running it in the browser console or you can also use REPL."
                ],
                "description" : "",
                "url" : "",
                "questions" : null
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "All about Variables",
        "description_short" : "Students learn about JavaScript variables, including the var, let, and const keywords, naming rules, and variable scopes (block scope, function scope, and global scope).",
        "description_long" : "Most of the time, a JavaScript application needs to work with information. To store and represent this information in the JavaScript codebase, we use variables. A variable is a container for a value.",
        "lessons" : [
            {
                "title" : "Variables",
                "theories_list" : [
                    "“var” keyword\n\nThe var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.",
                    "“let” keyword\n\nThe let declaration declares a block-scoped local variable, optionally initializing it to a value.",
                    "“const” keyword\n\nConstants are block-scoped, much like variables declared using the let keyword. The value of a constant can’t be changed through reassignment (i.e. by using the assignment operator), and it can’t be redeclared (i.e. through a variable declaration). However, if a constant is an object or array its properties or items can be updated or removed."
                ],
                "description" : "To use variables in JavaScript, we first need to create it i.e. declare a variable. To declare variables, we use one of the var, let, or const keywords.",
                "url" : "https://www.codeguage.com/courses/js/variables",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Naming Rules",
                "theories_list" : [
                    "The rules we must follow when naming variables in JavaScript are as follows:",
                    "1. Names can only contain alphanumeric characters (a-z, A-Z, 0-9) and the _ (underscore) and $ (dollar sign) characters; nothing else. Hence, first-name is invalid since it contains a hyphen (-) which is illegal to put in a variable name.",
                    "2. Names can't begin with a digit. Hence, 2nd is invalid.",
                    "3. Names can't contain spaces. Hence, first word is invalid.",
                    "4. Names can't be reserved keywords. Hence, var is invalid."
                ],
                "description" : "A variable name should accurately identify your variable. When you create good variable names, your JavaScript code becomes easier to understand and easier to work with. Properly naming variables is really important. JavaScript also has some rules when it comes to naming variables.",
                "url" : "https://www.codeguage.com/courses/js/variables#Tips_for_naming_variables",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Scopes",
                "theories_list" : [
                    "Block Scope:\n\nThis scope restricts the variable that is declared inside a specific block, from access by the outside of the block. The let & const keyword facilitates the variables to be block scoped. In order to access the variables of that specific block, we need to create an object for it. Variables declared with the var keyword, do not have block scope.",
                    "Function Scope:\n\nWhen a variable is declared inside a function, it is only accessible within that function and cannot be used outside that function.",
                    "Global Scope:\n\nVariables declared Globally (outside any function) have Global Scope. Global variables can be accessed from anywhere in a JavaScript program. Variables declared with var, let and const are quite similar when declared outside a block."
                ],
                "description" : "In JavaScript, scope refers to the visibility of a variable or how it can be used after it is declared. The scope of a variable depends on the keyword that was used to declare it.",
                "url" : "https://www.w3schools.com/js/js_scope.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Data Types",
        "description_short" : "This lesson covers the different data types in JavaScript, including primitive types (number, string, boolean, null, undefined, symbol, bigint) and non-primitive types (objects and arrays).",
        "description_long" : "Data type refers to the type of data that a JavaScript variable can hold. There are seven primitive data types in JavaScript (Number, BigInt, String, Boolean, Null, Undefined and Symbol). Objects are non-primitives.",
        "lessons" : [
            {
                "title" : "Object",
                "theories_list" : [
                    "JavaScript object is a data structure that allows us to have key-value pairs; so we can have distinct keys and each key is mapped to a value that can be of any JavaScript data type. Comparing it to a real-world object, a pen is an object with several properties such as color, design, the material it is made of, etc. In the same way, JavaScript objects can have properties that define their characteristics.",
                    "Built-in objects, or “global objects”, are those built into the language specification itself. There are numerous built-in objects with the JavaScript language, all of which are accessible at the global scope. Some examples are:\n\n- Number\n- Math\n- Date\n- String\n- Error\n- Function\n- Boolean"
                ],
                "description" : "A collection of key-value pairs used to store complex data structures.",
                "url" : "https://www.w3schools.com/js/js_object_definition.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "TypeOf Operator",
                "theories_list" : [
                    "You can use the typeOf operator to find the data type of a JavaScript variable. It returns a string indicating the type of provided operand’s value."
                ],
                "description" : "An operator used to determine the type of a variable or value.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Primitive Types",
                "theories_list" : [
                    "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. A significant difference between primitive data types and non-primitives is that primitive types can only contain one value, and that value must be of the same primitive type. In contrast, non-primitives can accommodate a variable number of values, and these values can be of different primitive types. This flexibility is evident in data structures like arrays and objects.",
                    "In the context of primitives, it’s important to note that they do not possess methods or properties. However, JavaScript enables access to methods and properties associated with primitive types such as string, number, and boolean. this functionality is due to JavaScript’s ability to implicitly convert primitives to objects with wrapper objects when necessary. When properties are accessed on primitives, JavaScript auto-boxes the value into a wrapper object and accesses the property on that object instead.",
                    "There are 7 primitive data types:\n\n- string\n- number\n- bigint\n- boolean\n- undefined\n- symbol\n- null\n\nMost of the time, a primitive value is represented directly at the lowest level of the language implementation."
                ],
                "description" : "Overview of number, string, boolean, null, undefined, symbol, and bigint." ,
                "url" : "https://developer.mozilla.org/en-US/docs/Glossary/Primitive",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Data Structures I",
        "description_short" : "Students are introduced to data structures, focusing on arrays and JSON (JavaScript Object Notation), which are essential for organizing and managing data efficiently.",
        "description_long" : "A Data structure is a format to organize, manage and store data in a way that allows efficient access and modification. JavaScript has primitive (built-in) and non-primitive (not built-in) data structures. Primitive data structures come by default with the programming language and you can implement them out of the box (like arrays and objects). Non-primitive data structures don’t come by default and you have to code them up if you want to use them.",
        "lessons" : [
            {
                "title" : "Indexed collections",
                "theories_list" : [
                    "Indexed Collections are collections that have numeric indices i.e. the collections of data that are ordered by an index value. In JavaScript, an array is an indexed collection. An array is an ordered set of values that has a numeric index.",
                    "Arrays are objects that store a collection of items and can be assigned to a variable. They have their methods that can perform operations on the array."
                ],
                "description" : "Arrays that store multiple values in an ordered list, accessible by index.",
                "url" : "https://www.geeksforgeeks.org/javascript-indexed-collections/",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Structured data",
                "theories_list" : [
                    "Structured data is used by search-engines, like Google, to understand the content of the page, as well as to gather information about the web and the world in general.\nIt is also coded using in-page markup on the page that the information applies to.",
                    "JSON\n\nJavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa)."
                ],
                "description" : "Using objects and JSON to organize and store data in a hierarchical structure.",
                "url" : "https://developers.google.com/search/docs/appearance/structured-data/intro-structured-data",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Equality Comparisons I",
        "description_short" : "This lesson covers comparison operators, including ==, ===, and Object.is(), and their usage in determining equality or difference between variables or values.",
        "description_long" : "Comparison operators are used in logical statements to determine equality or difference between variables or values. Comparison operators can be used in conditional statements to compare values and take action depending on the result.",
        "lessons" : [
            {
                "title" : "Value Comparison Operators",
                "theories_list" : [
                    "In javascript, the == operator does the type conversion of the operands before comparison, whereas the === operator compares the values and the data types of the operands. The Object.is() method determines whether two values are the same value: Object.is(value1, value2).",
                    "Object.is() is not equivalent to the == operator. The == operator applies various coercions to both sides (if they are not the same type) before testing for equality (resulting in such behavior as \"\" == false being true), but Object.is() doesn’t coerce either value.",
                    "Object.is() is also not equivalent to the === operator. The only difference between Object.is() and === is in their treatment of signed zeros and NaN values. The === operator (and the == operator) treats the number values -0 and +0 as equal but treats NaN as not equal to each other."
                ],
                "description" : "Operators such as '==', '===', and 'Object.is()' used to compare values for equality or difference.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Loops and Iterations",
        "description_short" : "Loops offer a quick and easy way to do something repeatedly.",
        "description_long" : "You can think of a loop as a computerized version of the game where you tell someone to take X steps in one direction, then Y steps in another.",
        "lessons" : [
            {
                "title" : "The “for” loop",
                "theories_list" : [
                    "The for loop is a standard control-flow construct in many programming languages, including JavaScript. It’s commonly used to iterate over given sequences or iterate a known number of times and execute a piece of code for each iteration."
                ],
                "description" : "Iterating with a counter.",
                "url" : "https://www.codeguage.com/courses/js/loops-for-loop",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "“do…while” statement",
                "theories_list" : [
                    "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once."
                ],
                "description" : "Iterating at least once before checking the condition.",
                "url" : "https://www.w3schools.com/jsref/jsref_dowhile.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "“while” statement",
                "theories_list" : [
                    "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement."
                ],
                "description" : "Iterating based on a condition.",
                "url" : "https://www.codeguage.com/courses/js/loops-while-loop",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "“break/continue”",
                "theories_list" : [
                    "break statement, without a label reference, can only be used to jump out of a loop or a switch block.",
                    "continue statement, with or without a label reference, can only be used to skip one loop iteration."
                ],
                "description" : "Statements used to exit a loop or skip to the next iteration, respectively.",
                "url" : "https://www.w3schools.com/js/js_break.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Labeled statement",
                "theories_list" : [
                    "JavaScript label statements are used to prefix a label to an identifier. It can be used with break and continue statement to control the flow more precisely.\nA label is simply an identifier followed by a colon(:) that is applied to a block of code."
                ],
                "description" : "A label that provides a named reference for break and continue statements within nested loops.",
                "url" : "https://www.tutorialspoint.com/What-are-label-statements-in-JavaScript",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Control Flow",
        "description short": "This lesson covers control flow statements in JavaScript, such as if, else, switch, and try...catch, which are used to control the execution of code based on certain conditions.",
        "description_long" : "In JavaScript, the Control flow is a way of how your computer runs code from top to bottom. It starts from the first line and ends at the last line unless it hits any statement that changes the control flow of the program such as loops, conditionals, etc.\nWe can control the flow of the program through any of these control structures:\n- Sequential (default mode)\n- Conditional Statements\n- Exception Handling\n- Loops and Iterations",
        "lessons" : [
            {
                "title" : "Conditional Statements",
                "theories_list" : [
                    "If…else:\n\nThe if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement in the optional else clause will be executed.",
                    "Switch:\n\nThe switch statement evaluates an expression, matching the expression’s value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered. The default clause of a switch statement will be jumped to if no case matches the expression’s value."
                ],
                "description" : "When you write code, you often want to perform different actions for different decisions. You can use conditional statements in your code to do this. In JavaScript, we have three conditional statements: if, if...else, and switch.",
                "url" : "https://javascript.info/ifelse",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Exception Handling",
                "theories_list" : [
                    "“throw” statement\n\nThe throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won’t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.",
                    "“Try/catch/finally”\n\nThese are ways of handling errors in your JavaScript code. Inside the try code block we have the code to run, inside the catch block we handle the errors, and inside the finally block we have code that runs after the execution of the previous code blocks, regardless of the result.",
                    "Utilizing Error Objects\n\nWhen a runtime error occurs, a new Error object is created and thrown. With this Error object, we can determine the type of the Error and handle it according to its type.",
                    "Types of Errors:\n\nBesides error constructors, Javascript also has other core Error constructors.\n\nFor example:\n\n- AggregateError\n- EvalError\n- InternalError\n- RangeError\n- ReferenceErrorn\n- SyntaxError"
                ],
                "description" : "In JavaScript, all exceptions are simply objects. While the majority of exceptions are implementations of the global Error class, any old object can be thrown. With this in mind, there are two ways to throw an exception: directly via an Error object, and through a custom object.",
                "url" : "https://rollbar.com/guides/javascript/how-to-throw-exceptions-in-javascript/",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Expressions and Operators I",
        "description_short" : "Students are introduced to various operators in JavaScript, including arithmetic, comparison, logical, and assignment operators, and how they are used to perform different operations on variables and values.",
        "description_long" : "At a high level, an expression is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely evaluate. The expression x = 7 is an example of the first type. This expression uses the = operator to assign the value seven to the variable x. The expression itself evaluates to 7. The expression 3 + 4 is an example of the second type. This expression uses the + operator to add 3 and 4 together and produces a value, 7. However, if it’s not eventually part of a bigger construct (for example, a variable declaration like const z = 3 + 4), its result will be immediately discarded — this is usually a programmer mistake because the evaluation doesn’t produce any effects. As the examples above also illustrate, all complex expressions are joined by operators, such as = and +.",
        "lessons" : [
            {
                "title" : "Assignment Operators",
                "theories_list" : [
                    "An assignment operator assigns a value to its left operand based on the value of its right operand. The simple assignment operator is equal (=), which assigns the value of its right operand to its left operand. That is, x = f() is an assignment expression that assigns the value of f() to x."
                ],
                "description" : "Operators that assign values to variables, such as '=', '+=', '-=', '*=', '/='",
                "url" : "https://javascript.info/operators#assignment",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Comparison Operators",
                "theories_list" : [
                    "Comparison operators are the operators that compare values and return true or false. The operators include: >, <, >=, <=, ==, ===, != and !==."
                ],
                "description" : "Operators that compare two values, such as '==', '===', '!=', '!==', '>', '<', '>=', '<='.",
                "url" : "https://www.w3schools.com/js/js_comparisons.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Arithmetic operators",
                "theories_list" : [
                    "The Arithmetic operators perform addition, subtraction, multiplication, division, exponentiation, and remainder operations.",
                    "Arithmetic operators in JavaScript are as follows:\n\n- Addition (+)\n- Subtraction (-)\n- Multiplication (*)\n- Exponentiation (**)\n- Division (/)\n- Modulus i.e. Remainder (%)\n- Increment (++)\n- Decrement (--)"
                ],
                "description" : "Operators that perform mathematical operations, such as '+', '-', '*', '/', '%', '++', '--'.",
                "url" : "https://javascript.info/operators#maths",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Logical Operators",
                "theories_list" : [
                    "There are four logical operators in JavaScript:\n\n- Logical AND (&&)\n- Logical OR (||)\n- Logical NOT (!)\n- Logical nullish assignment (??)"
                ],
                "description" : "Operators that combine boolean values, such as '&&', '||', '!'.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "String Operators",
                "theories_list" : [
                    "In addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates two string values together, returning another string that is the union of the two operand strings.\nThe shorthand assignment operator += can also be used to concatenate strings."
                ],
                "description" : "Operators that manipulate string values, including concatenation using '+'.",
                "url" : "https://javascript.info/operators#string-concatenation-with-binary",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Conditional Operators",
                "theories_list" : [
                    "Conditional operator also known as Ternary operator is the only JS operator that takes three operands.\nThe operator can have one of two values based on a condition.\nSyntax: condition ? val_for_true : val_for_false"
                ],
                "description" : "The ternary operator '? :' that returns one of two values based on a condition.",
                "url" : "https://www.w3schools.com/js/js_comparisons.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Comma Operator",
                "theories_list" : [
                    "The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression’s final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a for loop."
                ],
                "description" : "An operator that allows multiple expressions to be evaluated in a single statement, returning the last expression's value." ,
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Unary Operators",
                "theories_list" : [
                    "JavaScript Unary Operators are the special operators that consider a single operand and perform all the types of operations on that single operand. These operators include unary plus, unary minus, prefix increments, postfix increments, prefix decrements, and postfix decrements."
                ],
                "description" : "Operators that operate on a single operand, such as 'typeof', 'delete', 'void', '+', '-', '!'.",
                "url" : "https://www.educba.com/unary-operators-in-javascript/",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Functions I",
        "description_short" : "This lesson covers the basics of functions in JavaScript, including function declarations, expressions, parameters, and arrow functions, emphasizing their importance in creating reusable code blocks.",
        "description_long" : "Functions exist so we can reuse code. They are blocks of code that execute whenever they are invoked. Each function is typically written to perform a particular task, like an addition function used to find the sum of two or more numbers. When numbers need to be added anywhere within your code, the addition function can be invoked as many times as necessary.",
        "lessons" : [
            {
                "title" : "Function Parameters",
                "theories_list" : [
                    "The parameter is the name given to the variable declared inside the definition of a function. There are two special kinds of syntax: default and rest parameters.",
                    "Default Params:\n\nDefault function parameters allow named parameters to be initialized with default values if no value or undefined is passed.",
                    "Rest Params:\n\nThe rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript."
                ],
                "description" : "Passing values into functions.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Arrow Functions",
                "theories_list" : [
                    "Arrow Function is a new way of creating functions with the “=>” operator with a shorter syntax."
                ],
                "description" : "Concise syntax for defining functions.",
                "url" : "https://www.w3schools.com/js/js_arrow_function.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Built in functions",
                "theories_list" : [
                    "A JavaScript method is a property containing a function definition . In other words, when the data stored on an object is a function we call that a method.",
                    "To differentiate between properties and methods, we can think of it this way: A property is what an object has, while a method is what an object does.",
                    "Since JavaScript methods are actions that can be performed on objects, we first need to have objects to start with. There are several objects built into JavaScript which we can use."
                ],
                "description" : "Predefined functions provided by JavaScript, such as alert(), parseInt(), and setTimeout(), which perform common tasks." ,
                "url" : "https://www.tutorialspoint.com/javascript/javascript_builtin_functions.htm",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Expressions and Operators II",
        "description_short" : "This is the level 2 of Expressions and Operators course",
        "description_long" : "This lesson dives into more complex operators, including bitwise operators and BigInt operators, which perform operations on binary representations and large integers.",
        "lessons" : [
            {
                "title" : "Bitwise operators",
                "theories_list" : [
                    "Bitwise operators treat arguments as 32-bits (zeros & ones) and work on the level of their binary representation. Ex. Decimal number 9 has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
                    "Bitwise operators in JavaScript are as follows:\n\n- Bitwise AND (&)\n- Bitwise OR (|)\n- Bitwise XOR (^)\n- Bitwise NOT (~)\n- Left shift (<<)\n- Sign-propagating right shift (>>)\n- Zero-fill right shift (>>>)"
                ],
                "description" : "Manipulating binary representations of numbers.",
                "url" : "https://javascript.info/operators#bitwise-operators",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "BigInt Operators",
                "theories_list" : [
                    "Most operators that can be used with the Number data type will also work with BigInt values (e.g. arithmetic, comparison, etc.). However, the unsigned right shift >>> operator is an exception and is not supported. Similarly, some operators may have slight differences in behaviour (for example, division with BigInt will round towards zero)."
                ],
                "description" : "Working with very large integers.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bigint_operators",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Relational Operators",
                "theories_list" : [
                    "Relational operators are also known as comparison operators. They are used to find the relationship between two values or compare the relationship between them; on the comparison, they yield the result true or false."
                ],
                "description" : "Operators used to compare the relationship between two values, such as '<', '<=','>', and '>='.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#relational_operators",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Functions II",
        "description_short" :"This is the level 2 of Functions course",
        "description_long" : "Students learn advanced function concepts, such as higher-order functions, closures, and the use of the this keyword, to write more powerful and flexible code.",
        "lessons" : [
            {
                "title" : "Arguments object",
                "theories_list" : [
                    "The arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function, available within all non-arrow functions. You can refer to a function’s arguments inside that function by using its arguments object. It has entries for each argument the function was called with, with the first entry’s index at 0. But, in modern code, rest parameters should be preferred."
                ],
                "description" : "An array-like object accessible within functions that contains the values of the arguments passed to the function.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Scope and function stack",
                "theories_list" : [
                    "Scope\n\nA space or environment in which a particular variable or function can be accessed or used. Accessibility of this variable or function depends on where it is defined.",
                    "JavaScript has the following kinds of scopes:\n\n- Global scope: The default scope for all code running in script mode.\n- Module scope: The scope for code running in module mode.\n- Function scope: The scope created with a function.\n- Block scope: The scope created with a pair of curly braces (a block).",
                    "Function Stack (Call stack)\n\nThe function stack is how the interpreter keeps track of its place in a script that calls multiple functions, like which function is currently executing and which functions within that function are being called.",
                    "Recursion:\n\nOne of the most powerful and elegant concept of functions, recursion is when a function invokes itself. Such a function is called a recursive function. As recursion happens, the underlying code of the recursive function gets executed again and again until a terminating condition, called the base case, gets fulfilled. As you dive into the world of algorithms, you’ll come across recursion in many many instances.",
                    "Lexical scoping:\n\nBefore one can make an intuition of closures in JavaScript, it’s important to first get the hang of the term ‘lexical environment’. In simple words, the lexical environment for a function f simply refers to the environment enclosing that function’s definition in the source code.",
                    "Closures:\n\nFunction closures are one of the most powerful, yet most misunderstood, concepts of JavaScript that are actually really simple to understand. A closure refers to a function along with its lexical environment. It is essentially what allows us to return a function A, from another function B, that remembers the local variables defined in B, even after B exits. The idea of closures is employed in nearly every other JavaScript program, hence, it’s paramount for a JavaScript developer to know it really well."
                ],
                "description" : "The context in which variables are accessible and the order of function calls leading to the current execution point.",
                "url" : "https://developer.mozilla.org/en-US/docs/Glossary/Scope",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Strict Mode",
        "description_short" : "This lesson introduces strict mode in JavaScript, which helps catch common coding mistakes and ensures cleaner code by enforcing stricter parsing and error handling.",
        "description_long" : "Strict mode helps catch common coding mistakes and ensures cleaner code by enforcing stricter parsing and error handling. This lesson introduces how to enable strict mode and the benefits it provides. Students will learn about the restrictions and errors that strict mode enforces, helping them write more secure and robust JavaScript code.",
        "lessons" : [
            {
                "title": "" ,
                "theories_list" : [
                    "JavaScript’s strict mode is a way to opt-in to a restricted variant of JavaScript, thereby implicitly opting out of “sloppy mode”. Strict mode isn’t just a subset: it intentionally has different semantics from regular code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don’t rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist so that scripts can opt into strict mode incrementally.",
                    "Strict mode makes several changes to normal JavaScript semantics:\n\n- Eliminates some JavaScript silent errors by changing them to throw errors.\n- Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes run faster than identical code that’s not strict mode.\n- Prohibits some syntax likely to be defined in future versions of ECMAScript."
                ],
                "description" : "A way to opt in to a restricted variant of JavaScript by using 'use strict' to enforce stricter parsing and error handling.",
                "url" : "https://javascript.info/strict-mode",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Using (this) keyword",
        "description_short" : "Students learn the intricacies of the this keyword in JavaScript, including its behavior in different contexts and how to control its value using methods like call, apply, and bind.",
        "description_long" : "In JavaScript, the this keyword is a little different compared to other languages. It refers to an object, but it depends on how or where it is being invoked. It also has some differences between strict mode and non-strict mode.\n\n- In an object method, this refers to the object\n- Alone, this refers to the global object\n- In a function, this refers to the global object\n- In a function, in strict mode, this is undefined\n- In an event, this refers to the element that received the event\n- Methods like call(), apply(), and bind() can refer this to any object",
        "lessons" : [
            {
                "title" : "Function Borrowing",
                "theories_list" : [
                    "Function borrowing allows us to use the methods of one object on a different object without having to make a copy of that method and maintain it in two separate places. It is accomplished through the use of .call(), .apply(), or .bind(), all of which exist to explicitly set this on the method we are borrowing."
                ],
                "description" : "Using a method from one object on a different object by setting the 'this' context to the borrowing object.",
                "url" : "https://medium.com/@ensallee/function-borrowing-in-javascript-4bd671e9d7b4",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "“this” in a method",
                "theories_list" : [
                    "Methods are properties of an object which are functions. The value of this inside a method is equal to the calling object. In simple words, this value is the object “before dot”, the one used to call the method."
                ],
                "description" : "Refers to the object that is calling the method.",
                "url" : "https://javascript.info/object-methods#this-in-methods",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "“this” in a function",
                "theories_list" : [
                    "The keyword this when used in a function refers to the global object.\n\nNote: in a browser window the global object is the window object."
                ],
                "description" : "Refers to the global object (or 'undefined' in strict mode) when used in a regular function.",
                "url" : "https://www.w3schools.com/js/js_this.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Using “this” alone",
                "theories_list" : [
                    "The keyword this when used alone refers to the global object.\n\nNote: in a browser window the global object is the window object."
                ],
                "description" : "Refers to the global object in non-strict mode and 'undefined' in strict mode.",
                "url" : "https://www.w3schools.com/js/js_this.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "“this” in event handlers",
                "theories_list" : [
                    "The keyword this when used in an event handler refers to the element that received the event."
                ],
                "description" : "Refers to the element that received the event.",
                "url" : "https://www.w3schools.com/js/js_this.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "“this” in arrow functions",
                "theories_list" : [
                    "The keyword this when used in an arrow function refers to the parent object."
                ],
                "description" : "Lexically binds 'this' from the surrounding scope, not creating its own 'this' context.",
                "url" : "https://www.w3schools.com/js/js_arrow_function.asp",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Explicit binding",
                "theories_list" : [
                    "Explicit binding is when you use the call or apply methods to explicitly set the value of this in a function. Explicit Binding can be applied using call(), apply(), and bind()."
                ],
                "description" : "Using 'call()', 'apply()', or 'bind()' to explicitly set the value of this.",
                "url" : "https://medium.com/@msinha2801/explicit-binding-rule-for-this-keyword-in-js-712405b0a11",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Asynchronous JavaScript I",
        "description_short" : "This lesson covers the basics of asynchronous programming, including callbacks, promises, and the async/await syntax, which are essential for handling asynchronous operations.",
        "description_long" : "Asynchronous programming is a technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished. Once that task has finished, your program is presented with the result.\nMany functions provided by browsers, especially the most interesting ones, can potentially take a long time, and therefore, are asynchronous. For example:\n\n- Making HTTP requests using fetch()\n- Accessing a user’s camera or microphone using getUserMedia()\n- Asking a user to select files using showOpenFilePicker()\n\nSo even though you may not have to implement your own asynchronous functions very often, you are very likely to need to use them correctly.",
        "lessons" : [
            {
                "title" : "Callbacks",
                "theories_list" : [
                    "A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
                    "Callback hell\n\nThe callback hell is when we try to write asynchronous JavaScript in a way where execution happens visually from top to bottom, creating a code that has a pyramid shape with many }) at the end."
                ],
                "description" : "Functions passed as arguments to be executed after the completion of an asynchronous operation.",
                "url" : "https://javascript.info/callbacks",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Promises",
                "theories_list" : [
                    "Promises are a much better way to work with asynchronous code in JavaScript than the old and error-prone callback approach. They were introduced into JavaScript with ECMAScript 6. Using promises, we can manage extremely complex asynchronous code with rigorous error-handling setup, write code in a more or less synchronous style, and keep ourselves from running into the so-called callback hell.",
                    "Async/Await\n\nasync/await is a special syntax to work with promises in a more comfortable fashion. We use async keyword to declare a async function that return a Promise, and the await keyword makes a function wait for a Promise."
                ],
                "description" : "Objects representing the eventual completion or failure of an asynchronous operation, allowing for chained then and catch methods.",
                "url" : "https://www.codeguage.com/courses/advanced-js/promises-introduction",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "setTimeout",
                "theories_list" : [
                    "The setTimeout runs a function after the specified period expires. Times are declared in milliseconds."
                ],
                "description" : "A function that executes a specified function after a set delay.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/API/setTimeout",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "setInterval",
                "theories_list" : [
                    "The setInterval() method helps us to repeatedly execute a function after a fixed delay. It returns a unique interval ID which can later be used by the clearInterval() method, which stops further repeated execution of the function.",
                    "setInterval() is similar to setTimeout, with a difference. Instead of running the callback function once, it will run it forever, at the specific time interval you specify (in milliseconds)."
                ],
                "description" : "A function that repeatedly executes a specified function at fixed time intervals.",
                "url" : "https://www.geeksforgeeks.org/what-is-setinterval-in-javascript/",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Working with APIs",
        "description_short" : "Students learn how to interact with external APIs using JavaScript, including making HTTP requests, handling responses, and processing data from APIs.",
        "description_long" : "When working with remote APIs, you need a way to interact with those APIs. Modern JavaScript provides two native ways to send HTTP requests to remote servers, XMLHttpRequest and Fetch.",
        "lessons" : [
            {
                "title" : "XMLHttpRequest",
                "theories_list" : [
                    "XMLHttpRequest (XHR) is a built-in browser object that can be used to interact with server. XHR allows you to update data without having to reload a web page. Despite the word XML in its name, XHR not only used to retrieve data with XML format, we can use it with any type of data, like JSON, file(s), and much more."
                ],
                "description" : "An older JavaScript API for making HTTP requests to interact with servers.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            },
            {
                "title" : "Fetch",
                "theories_list" : [
                    "The fetch() method in JavaScript is used to request to the server and load the information on the webpages. The request can be of any APIs that return the data of the format JSON or XML. This method returns a promise."
                ],
                "description" : "A modern JavaScript API for making network requests, returning promises for easier asynchronous handling.",
                "url" : "https://javascript.info/fetch",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Classes",
        "description_short" : "This lesson introduces classes in JavaScript, including class declarations, constructors, inheritance, and methods, providing a foundation for object-oriented programming.",
        "description_long" : "Classes in JavaScript provide a blueprint for creating objects with predefined properties and methods. Using the 'class' keyword, developers can define constructor functions for initializing new objects and include methods to define object behaviors.",
        "lessons" : [
            {
                "title" : "Classes",
                "theories_list" : [
                    "Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but have some syntax and semantics that are not shared with ES5 class-like semantics."
                ],
                "description" : "Templates for creating objects with predefined properties and methods, using the 'class' keyword.",
                "url" : "https://javascript.info/classes",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Modules in JavaScript",
        "description_short" : "Students learn about modules in JavaScript, including how to organize code into reusable modules using import and export statements, which helps in maintaining large codebases.",
        "description_long" : "Modules encapsulate all sorts of code like functions and variables and expose all this to other files. Generally, we use it to break our code into separate files to make it more maintainable. They were introduced into JavaScript with ECMAScript 6.",
        "lessons" : [
            {
                "title" : "Modules in JavaScript",
                "theories_list" : [
                    "CommonJS:\n\nCommonJS modules are the original way to package JavaScript code for Node.js. Node.js also supports the ESModules standard used by browsers and other JavaScript runtimes, but CJS is still widely used in backend Node.js applications. Sometimes these modules will be written with a .cjs extension.",
                    "ESModules:\n\nESModules is a standard that was introduced with ES6 (2015). The idea was to standardize how JS modules work and implement these features in browsers. This standard is widely used with frontend frameworks such as react and can also be used in the backend with Node.js. Sometimes these modules will be written with a .mjs extension."
                ],
                "description" : "Modules encapsulate all sorts of code like functions and variables and expose all this to other files. Generally, we use it to break our code into separate files to make it more maintainable. They were introduced into JavaScript with ECMAScript 6.",
                "url" : "https://javascript.info/modules-intro",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
            }
        ]
            }
        ]
    },
    {
        "level" : "EXPERT",
        "title" : "Equality Comparisons II",
        "description_short" : "This is the level 2 of Equality Comparisons course",
        "description_long": "This lesson covers advanced equality algorithms, including isLooselyEqual, isStrictlyEqual, SameValueZero, and SameValue, and their differences in handling type conversion and comparison.",
        "lessons" : [
            {
                "title" : "Equality algorithms",
                "theories_list" : [
                    "Equality algorithms are used to perform equality comparisons of values or variables in JavaScript. Each equality algorithm works slightly differently, and the one you use depends on the type of comparison you want to make.",
                    "“isLooselyEqual”\n\nisLooselyEqual checks whether its two operands are equal, returning a Boolean result. It attempts to convert and compare operands that are of different types.",
                    "“isStrictlyEqual”\n\nisStrictlyEqual checks whether its two operands are equal, returning a Boolean result. It always considers operands of different types to be different.",
                    "“Same zero zero”\n\nSameValueZero equality determines whether two values are functionally identical in all contexts with +0 and -0 are also considered equal.",
                    "“Same value”\n\nSameValue equality determines whether two values are functionally identical in all contexts."
                ],
                "description" : "Methods used by JavaScript to determine if two values are equal, including strict equality, loose equality, and SameValue algorithms.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "EXPERT",
        "title" : "Asynchronous JavaScript II",
        "description_short" : "This is the level 2 of Asynchronous JavaScript course",
        "description_long" : "Building on the basics, this lesson covers advanced topics in asynchronous programming, such as error handling in async code, working with multiple promises, and using async iterators.",
        "lessons" : [
            {
                "title" : "Event Loop",
                "theories_list" : [
                    "The Event Loop is one of the most important aspects to understand about Node.js. Why is this so important? Because it explains how Node.js can be asynchronous and have non-blocking I/O, it explains the “killer feature” of Node.js, which made it this successful."
                ],
                "description" : "A mechanism that allows JavaScript to perform non-blocking operations by managing the execution of multiple tasks, callbacks, and handling asynchronous events.",
                "url" : "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                    }
                ]
            }
        ]
    },
    {
        "level" : "EXPERT",
        "title" : "JavaScript Iterators and Generators",
        "description_short" : "Students learn about iterators and generators in JavaScript, including how to create and use them to control the iteration behavior of objects and manage asynchronous data streams.",
        "description_long" : "Iterators and generators, introduced into JavaScript with ECMAScript 6, represent an extremely useful concept related to iteration in the language. Iterators are objects, abiding by the iterator protocol, that allows us to easily iterate over a given sequence in various ways, such as using the for...of loop. Generators, on the other hand, allow us to use functions and the yield keyword to easily define iterable sequences that are iterators as well.",
        "lessons" : [
            {
                "title" : "JavaScript Iterators and Generators",
                "theories_list" : [

                ],
                "description" : "Iterators provide a standard way to produce a sequence of values, while generators, defined with 'function*', allow functions to yield multiple values over time, enabling more control over iteration.",
                "url" : "https://www.codeguage.com/courses/advanced-js/iteration-introduction",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                }
            }
        ]
    },
    {
        "level" : "EXPERT",
        "title" : "Memory Management",
        "description_short" : "This lesson covers memory management in JavaScript, including how the garbage collector works, memory leaks, and best practices for efficient memory usage.",
        "description_long" : "Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don’t need to worry about memory management.",
        "lessons" : [
            {
                "title" : "Memory lifecycle",
                "theories_list" : [
                    "Regardless of the programming language, the memory life cycle is pretty much always the same:\n\n- Allocate the memory you need\n- Use the allocated memory (read, write)\n- Release the allocated memory when it is not needed anymore",
                    "The second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript."
                ],
                "description" : "The process of allocating, using, and releasing memory in an application to ensure efficient use of resources.",
                "url" : "https://medium.com/swlh/the-lifecycle-of-memory-in-javascript-5b5bffc5ff4c",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                }
            },
            {
                "title" : "Garbage Collection",
                "theories_list" : [
                    "Memory management in JavaScript is performed automatically and invisibly to us. We create primitives, objects, functions… All that takes memory. The main concept of memory management in JavaScript is reachability."
                ],
                "description" : "An automatic process in JavaScript that reclaims memory occupied by objects no longer in use, preventing memory leaks and optimizing performance.",
                "url" : "https://javascript.info/garbage-collection",
                "questions" : [
                    {
                        "questionType": ,
                        "hint": ,
                        "questionDescription": ,
                        "options": [],
                        "correctAnswers": []
                }
            }
        ]
    }
]