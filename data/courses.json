[
    {
        "level" : "BEGINNER",
        "title" : "Introduction",
        "description_short" : "Introduction to JavaScript",
        "description_long" : "This section introduces JavaScript, its history, and how to.",
        "lessons" : [
            {
                "title" : "What is JavaScript?",
                "theories_list" : [
                    "JavaScript, often abbreviated JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. It lets us add interactivity to pages e.g. you might have seen sliders, alerts, click interactions, popups, etc on different websites — all of that is built using JavaScript. Apart from being used in the browser, it is also used in other non-browser environments as well, such as Node.js for writing server-side code in JavaScript, Electron for writing desktop applications, React Native for mobile applications, and so on."
                ],
                "description" : "JavaScript is a key language for web interactivity, used in browsers and beyond, including server-side, desktop, and mobile development.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
                "questions" : null
            },
            {
                "title" : "History of JavaScript",
                "theories_list" : [
                    "JavaScript was initially created by Brendan Eich of NetScape and was first announced in a press release by Netscape in 1995. It has a bizarre history of naming; initially, it was named Mocha by the creator, which was later renamed LiveScript. In 1996, about a year later after the release, NetScape decided to rename it to JavaScript with hopes of capitalizing on the Java community (although JavaScript did not have any relationship with Java) and released Netscape 2.0 with the official support of JavaScript."
                ],
                "description" : "JavaScript was created by Brendan Eich in 1995, initially named Mocha, then LiveScript, and finally JavaScript to capitalize on the Java brand.",
                "url" : "https://roadmap.sh/guides/history-of-javascript",
                "questions" : null
            },
            {
                "title" : "How to run JavaScript?",
                "theories_list" : [
                    "JavaScript can be run in the browser by including the external script file using the script tag, writing it within the HTML page using the script tag again, running it in the browser console or you can also use REPL."
                ],
                "description" : "You can run JavaScript in the browser through `<script>` tags, the browser console, or a REPL.",
                "url" : "https://www.digitalocean.com/community/tutorials/how-to-add-javascript-to-html",
                "questions" : null
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "All about Variables",
        "description_short" : "Students learn about JavaScript variables, including the var, let, and const keywords, naming rules, and variable scopes (block scope, function scope, and global scope).",
        "description_long" : "Most of the time, a JavaScript application needs to work with information. To store and represent this information in the JavaScript codebase, we use variables. A variable is a container for a value.",
        "lessons" : [
            {
                "title" : "Variables",
                "theories_list" : [
                    "“var” keyword\n\nThe var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.",
                    "“let” keyword\n\nThe let declaration declares a block-scoped local variable, optionally initializing it to a value.",
                    "“const” keyword\n\nConstants are block-scoped, much like variables declared using the let keyword. The value of a constant can’t be changed through reassignment (i.e. by using the assignment operator), and it can’t be redeclared (i.e. through a variable declaration). However, if a constant is an object or array its properties or items can be updated or removed."
                ],
                "description" : "To use variables in JavaScript, we first need to create it i.e. declare a variable. To declare variables, we use one of the var, let, or const keywords.",
                "url" : "https://www.codeguage.com/courses/js/variables",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "The var keyword allows for block-scoping of variables.",
                        "question_description": "The var keyword declares variables that are block-scoped.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about which keyword allows you to declare variables that cannot be reassigned.",
                        "question_description": "Which keyword declares a variable whose value cannot be changed once assigned?",
                        "options": ["var", "let", "const", "function"],
                        "correct_answers": ["const"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the scope of variables declared with the let keyword.",
                        "question_description": "The ____ keyword is used to declare block-scoped variables.",
                        "options": ["var", "let", "const", "function"],
                        "correct_answers": ["let"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Constants have certain restrictions compared to variables declared with var or let.",
                        "question_description": "Which of the following statements is true about constants declared with the const keyword?",
                        "options": ["They can be reassigned to a new value.", "They cannot be redeclared in the same scope.", "They can be redeclared.", "They can be used to declare variables with function scope."],
                        "correct_answers": ["They cannot be redeclared in the same scope."]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how you can change the properties of an object declared with const.",
                        "question_description": "While the value of a constant declared with const cannot be changed, its ____ can be modified if it is an object or array.",
                        "options": ["type", "name", "properties", "scope"],
                        "correct_answers": ["properties"]
                    }
                ]
            },
            {
                "title" : "Naming Rules",
                "theories_list" : [
                    "The rules we must follow when naming variables in JavaScript are as follows:",
                    "1. Names can only contain alphanumeric characters (a-z, A-Z, 0-9) and the _ (underscore) and $ (dollar sign) characters; nothing else. Hence, first-name is invalid since it contains a hyphen (-) which is illegal to put in a variable name.",
                    "2. Names can't begin with a digit. Hence, 2nd is invalid.",
                    "3. Names can't contain spaces. Hence, first word is invalid.",
                    "4. Names can't be reserved keywords. Hence, var is invalid."
                ],
                "description" : "A variable name should accurately identify your variable. When you create good variable names, your JavaScript code becomes easier to understand and easier to work with. Properly naming variables is really important. JavaScript also has some rules when it comes to naming variables.",
                "url" : "https://www.codeguage.com/courses/js/variables#Tips_for_naming_variables",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Variable names can only include certain characters.",
                        "question_description": "Variable names in JavaScript can contain hyphens (-).",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the special characters allowed in variable names.",
                        "question_description": "Which of the following characters are allowed in JavaScript variable names?",
                        "options": ["#", "-", "_", "%"],
                        "correct_answers": ["_"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the rules about the starting character of variable names.",
                        "question_description": "Variable names in JavaScript cannot start with a ___.",
                        "options": ["letter", "digit", "underscore", "dollar sign"],
                        "correct_answers": ["digit"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Spaces in variable names are not allowed.",
                        "question_description": "Which of the following variable names is invalid in JavaScript?",
                        "options": ["firstName", "first_name", "first-name", "first$name"],
                        "correct_answers": ["first-name"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Some words are reserved for specific use in JavaScript.",
                        "question_description": "Variable names in JavaScript cannot be ____ keywords.",
                        "options": ["alphanumeric", "reserved", "common", "long"],
                        "correct_answers": ["reserved"]
                    }
                ]
            },
            {
                "title" : "Scopes",
                "theories_list" : [
                    "Block Scope:\n\nThis scope restricts the variable that is declared inside a specific block, from access by the outside of the block. The let & const keyword facilitates the variables to be block scoped. In order to access the variables of that specific block, we need to create an object for it. Variables declared with the var keyword, do not have block scope.",
                    "Function Scope:\n\nWhen a variable is declared inside a function, it is only accessible within that function and cannot be used outside that function.",
                    "Global Scope:\n\nVariables declared Globally (outside any function) have Global Scope. Global variables can be accessed from anywhere in a JavaScript program. Variables declared with var, let and const are quite similar when declared outside a block."
                ],
                "description" : "In JavaScript, scope refers to the visibility of a variable or how it can be used after it is declared. The scope of a variable depends on the keyword that was used to declare it.",
                "url" : "https://www.w3schools.com/js/js_scope.asp",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the scope of variables declared with let and const.",
                        "question_description": "Variables declared with the let and const keywords have block scope.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about where a variable can be accessed if it is declared within a function.",
                        "question_description": "What type of scope does a variable have if it is declared inside a function?",
                        "options": ["Global Scope", "Function Scope", "Block Scope", "Module Scope"],
                        "correct_answers": ["Function Scope"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the visibility of variables declared outside any function.",
                        "question_description": "Variables declared outside any function have ____ scope.",
                        "options": ["block", "function", "local", "global"],
                        "correct_answers": ["global"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "The var keyword does not restrict the scope of variables to blocks.",
                        "question_description": "Which keyword allows a variable to be accessed outside of a block even if declared within a block?",
                        "options": ["var", "let", "const", "function"],
                        "correct_answers": ["var"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Think about the difference in scope for variables declared with var inside a block.",
                        "question_description": "Variables declared with the var keyword do not have ____ scope.",
                        "options": ["function", "block", "global", "local"],
                        "correct_answers": ["block"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Data Types",
        "description_short" : "This lesson covers the different data types in JavaScript, including primitive types (number, string, boolean, null, undefined, symbol, bigint) and non-primitive types (objects and arrays).",
        "description_long" : "Data type refers to the type of data that a JavaScript variable can hold. There are seven primitive data types in JavaScript (Number, BigInt, String, Boolean, Null, Undefined and Symbol). Objects are non-primitives.",
        "lessons" : [
            {
                "title" : "Object",
                "theories_list" : [
                    "JavaScript object is a data structure that allows us to have key-value pairs; so we can have distinct keys and each key is mapped to a value that can be of any JavaScript data type. Comparing it to a real-world object, a pen is an object with several properties such as color, design, the material it is made of, etc. In the same way, JavaScript objects can have properties that define their characteristics.",
                    "Built-in objects, or “global objects”, are those built into the language specification itself. There are numerous built-in objects with the JavaScript language, all of which are accessible at the global scope. Some examples are:\n\n- Number\n- Math\n- Date\n- String\n- Error\n- Function\n- Boolean"
                ],
                "description" : "A collection of key-value pairs used to store complex data structures.",
                "url" : "https://www.w3schools.com/js/js_object_definition.asp",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the structure of JavaScript objects.",
                        "question_description": "JavaScript objects can only have properties that are strings.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about what a JavaScript object can contain.",
                        "question_description": "What are JavaScript objects used for?",
                        "options": ["Storing key-value pairs", "Performing mathematical operations", "Styling HTML elements", "Handling network requests"],
                        "correct_answers": ["Storing key-value pairs"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the type of data structures built into the language.",
                        "question_description": "The ____ object is an example of a built-in JavaScript object used for mathematical operations.",
                        "options": ["Math", "Date", "String", "Function"],
                        "correct_answers": ["Math"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the different types of built-in objects in JavaScript.",
                        "question_description": "Which of the following is not a built-in JavaScript object?",
                        "options": ["Number", "Date", "Car", "Error"],
                        "correct_answers": ["Car"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the purpose of objects in JavaScript.",
                        "question_description": "JavaScript objects are used to store complex data structures in the form of key-value ____.",
                        "options": ["pairs", "arrays", "lists", "functions"],
                        "correct_answers": ["pairs"]
                    }
                ]
            },
            {
                "title" : "TypeOf Operator",
                "theories_list" : [
                    "You can use the typeOf operator to find the data type of a JavaScript variable. It returns a string indicating the type of provided operand’s value."
                ],
                "description" : "An operator used to determine the type of a variable or value.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider what the typeof operator returns.",
                        "question_description": "The typeof operator returns the type of a variable as a string.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the types of values the typeof operator can return.",
                        "question_description": "What will the expression typeof 'hello' return?",
                        "options": ["string", "object", "undefined", "boolean"],
                        "correct_answers": ["string"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how the typeof operator works with variables of different types.",
                        "question_description": "The typeof operator applied to the number 42 will return ____.",
                        "options": ["'number'", "'string'", "'object'", "'boolean'"],
                        "correct_answers": ["'number'"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the special cases handled by the typeof operator.",
                        "question_description": "What will the expression typeof null return?",
                        "options": ["null", "undefined", "object", "string"],
                        "correct_answers": ["object"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Think about how the typeof operator evaluates undefined variables.",
                        "question_description": "The typeof operator applied to an undeclared variable will return ____.",
                        "options": ["'undefined'", "'null'", "'object'", "'error'"],
                        "correct_answers": ["'undefined'"]
                    }
                ]
            },
            {
                "title" : "Primitive Types",
                "theories_list" : [
                    "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. A significant difference between primitive data types and non-primitives is that primitive types can only contain one value, and that value must be of the same primitive type. In contrast, non-primitives can accommodate a variable number of values, and these values can be of different primitive types. This flexibility is evident in data structures like arrays and objects.",
                    "In the context of primitives, it’s important to note that they do not possess methods or properties. However, JavaScript enables access to methods and properties associated with primitive types such as string, number, and boolean. this functionality is due to JavaScript’s ability to implicitly convert primitives to objects with wrapper objects when necessary. When properties are accessed on primitives, JavaScript auto-boxes the value into a wrapper object and accesses the property on that object instead.",
                    "There are 7 primitive data types:\n\n- string\n- number\n- bigint\n- boolean\n- undefined\n- symbol\n- null\n\nMost of the time, a primitive value is represented directly at the lowest level of the language implementation."
                ],
                "description" : "Overview of number, string, boolean, null, undefined, symbol, and bigint." ,
                "url" : "https://developer.mozilla.org/en-US/docs/Glossary/Primitive",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the characteristics of primitive types in JavaScript.",
                        "question_description": "Primitive types in JavaScript can contain multiple values.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the number of primitive data types in JavaScript.",
                        "question_description": "How many primitive data types are there in JavaScript?",
                        "options": ["5", "6", "7", "8"],
                        "correct_answers": ["7"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the types that are considered primitive in JavaScript.",
                        "question_description": "The ____ data type is used to represent true or false values.",
                        "options": ["number", "boolean", "string", "symbol"],
                        "correct_answers": ["boolean"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Some types might seem primitive but aren't.",
                        "question_description": "Which of the following is not a primitive data type in JavaScript?",
                        "options": ["string", "object", "number", "symbol"],
                        "correct_answers": ["object"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how JavaScript handles primitive values and their methods.",
                        "question_description": "JavaScript can implicitly convert primitives to objects with ____ objects when necessary.",
                        "options": ["wrapper", "reference", "primitive", "boolean"],
                        "correct_answers": ["wrapper"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Data Structures I",
        "description_short" : "Students are introduced to data structures, focusing on arrays and JSON (JavaScript Object Notation), which are essential for organizing and managing data efficiently.",
        "description_long" : "A Data structure is a format to organize, manage and store data in a way that allows efficient access and modification. JavaScript has primitive (built-in) and non-primitive (not built-in) data structures. Primitive data structures come by default with the programming language and you can implement them out of the box (like arrays and objects). Non-primitive data structures don’t come by default and you have to code them up if you want to use them.",
        "lessons" : [
            {
                "title" : "Indexed collections",
                "theories_list" : [
                    "Indexed Collections are collections that have numeric indices i.e. the collections of data that are ordered by an index value. In JavaScript, an array is an indexed collection. An array is an ordered set of values that has a numeric index.",
                    "Arrays are objects that store a collection of items and can be assigned to a variable. They have their methods that can perform operations on the array."
                ],
                "description" : "Arrays that store multiple values in an ordered list, accessible by index.",
                "url" : "https://www.geeksforgeeks.org/javascript-indexed-collections/",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider how values are accessed in arrays.",
                        "question_description": "Arrays in JavaScript are indexed collections.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the characteristics of arrays in JavaScript.",
                        "question_description": "Which of the following best describes an array in JavaScript?",
                        "options": ["A collection of key-value pairs", "A collection of numeric indices", "An ordered set of values with numeric indices", "A set of unordered values"],
                        "correct_answers": ["An ordered set of values with numeric indices"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the structure and usage of arrays.",
                        "question_description": "An array in JavaScript can store multiple values in an ____ list.",
                        "options": ["unordered", "random", "indexed", "encrypted"],
                        "correct_answers": ["indexed"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Arrays are a type of object in JavaScript.",
                        "question_description": "Which of the following operations can be performed on a JavaScript array using array methods?",
                        "options": ["Adding or removing items", "Performing mathematical operations", "Styling HTML elements", "Handling network requests"],
                        "correct_answers": ["Adding or removing items"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider what arrays can store.",
                        "question_description": "In JavaScript, an array is an object that stores a collection of ____.",
                        "options": ["methods", "items", "functions", "styles"],
                        "correct_answers": ["items"]
                    }
                ]
            },
            {
                "title" : "Structured data",
                "theories_list" : [
                    "Structured data is used by search-engines, like Google, to understand the content of the page, as well as to gather information about the web and the world in general.\nIt is also coded using in-page markup on the page that the information applies to.",
                    "JSON\n\nJavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa)."
                ],
                "description" : "Using objects and JSON to organize and store data in a hierarchical structure.",
                "url" : "https://developers.google.com/search/docs/appearance/structured-data/intro-structured-data",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the purpose of structured data for search engines.",
                        "question_description": "Structured data helps search engines understand the content of a web page.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the format used to represent structured data in web applications.",
                        "question_description": "What is the standard text-based format for representing structured data based on JavaScript object syntax?",
                        "options": ["XML", "CSV", "JSON", "YAML"],
                        "correct_answers": ["JSON"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the acronym commonly used for JavaScript Object Notation.",
                        "question_description": "JSON stands for JavaScript ____ Notation.",
                        "options": ["Object", "Online", "Open", "Ordered"],
                        "correct_answers": ["Object"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the uses of JSON in web applications.",
                        "question_description": "Which of the following is a common use of JSON?",
                        "options": ["Styling web pages", "Transmitting data between a server and a client", "Storing binary data", "Running server-side scripts"],
                        "correct_answers": ["Transmitting data between a server and a client"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how structured data is implemented on web pages.",
                        "question_description": "Structured data is coded using in-page ____ on the page that the information applies to.",
                        "options": ["markup", "script", "comments", "styles"],
                        "correct_answers": ["markup"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Equality Comparisons I",
        "description_short" : "This lesson covers comparison operators, including ==, ===, and Object.is(), and their usage in determining equality or difference between variables or values.",
        "description_long" : "Comparison operators are used in logical statements to determine equality or difference between variables or values. Comparison operators can be used in conditional statements to compare values and take action depending on the result.",
        "lessons" : [
            {
                "title" : "Value Comparison Operators",
                "theories_list" : [
                    "In javascript, the == operator does the type conversion of the operands before comparison, whereas the === operator compares the values and the data types of the operands. The Object.is() method determines whether two values are the same value: Object.is(value1, value2).",
                    "Object.is() is not equivalent to the == operator. The == operator applies various coercions to both sides (if they are not the same type) before testing for equality (resulting in such behavior as \"\" == false being true), but Object.is() doesn’t coerce either value.",
                    "Object.is() is also not equivalent to the === operator. The only difference between Object.is() and === is in their treatment of signed zeros and NaN values. The === operator (and the == operator) treats the number values -0 and +0 as equal but treats NaN as not equal to each other."
                ],
                "description" : "Operators such as '==', '===', and 'Object.is()' used to compare values for equality or difference.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is",
                "questions" : [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider how the == operator handles type conversion.",
                        "question_description": "The == operator in JavaScript compares both value and type without any type conversion.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the differences between the == and === operators.",
                        "question_description": "Which operator compares both the values and the data types of the operands?",
                        "options": ["==", "===", "Object.is()", "="],
                        "correct_answers": ["==="]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the method used to determine if two values are the same without coercion.",
                        "question_description": "The method ____ is used to determine if two values are the same without type coercion.",
                        "options": ["Object.equals()", "Object.compare()", "Object.is()", "Object.match()"],
                        "correct_answers": ["Object.is()"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about how different comparison methods treat NaN values.",
                        "question_description": "Which method or operator treats NaN values as equal to each other?",
                        "options": ["==", "===", "Object.is()", "All of the above"],
                        "correct_answers": ["Object.is()"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the comparison of signed zeros in JavaScript.",
                        "question_description": "The === operator treats the number values -0 and +0 as ____.",
                        "options": ["equal", "different", "undefined", "null"],
                        "correct_answers": ["equal"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Loops and Iterations",
        "description_short" : "Loops offer a quick and easy way to do something repeatedly.",
        "description_long" : "You can think of a loop as a computerized version of the game where you tell someone to take X steps in one direction, then Y steps in another.",
        "lessons" : [
            {
                "title" : "The “for” loop",
                "theories_list" : [
                    "The for loop is a standard control-flow construct in many programming languages, including JavaScript. It’s commonly used to iterate over given sequences or iterate a known number of times and execute a piece of code for each iteration."
                ],
                "description" : "Iterating with a counter.",
                "url" : "https://www.codeguage.com/courses/js/loops-for-loop",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the structure of a for loop in JavaScript.",
                        "question_description": "The for loop is used to iterate over sequences or perform repeated execution a known number of times.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the components of a for loop in JavaScript.",
                        "question_description": "Which of the following is a correct syntax for a for loop in JavaScript?",
                        "options": [
                            "for (initialization; condition; increment/decrement) { // code to be executed }",
                            "for (condition; initialization; increment/decrement) { // code to be executed }",
                            "for (initialization, condition, increment/decrement) { // code to be executed }",
                            "for (initialization condition increment/decrement) { // code to be executed }"
                        ],
                        "correct_answers": ["for (initialization; condition; increment/decrement) { // code to be executed }"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the role of the counter in a for loop.",
                        "question_description": "In a for loop, the ____ is used to determine how many times the loop will execute.",
                        "options": ["counter", "condition", "initialization", "body"],
                        "correct_answers": ["condition"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about when a for loop terminates.",
                        "question_description": "When does a for loop stop executing?",
                        "options": [
                            "When the initialization is false",
                            "When the condition is false",
                            "When the increment is false",
                            "When the body is false"
                        ],
                        "correct_answers": ["When the condition is false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the purpose of each part of a for loop.",
                        "question_description": "The ____ part of a for loop is executed once before the loop starts.",
                        "options": ["initialization", "condition", "increment/decrement", "body"],
                        "correct_answers": ["initialization"]
                    }
                ]
            },
            {
                "title" : "“do…while” statement",
                "theories_list" : [
                    "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once."
                ],
                "description" : "Iterating at least once before checking the condition.",
                "url" : "https://www.w3schools.com/jsref/jsref_dowhile.asp",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider when the condition is evaluated in a do...while loop.",
                        "question_description": "In a do...while loop, the condition is evaluated before executing the statement.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the key characteristic of a do...while loop.",
                        "question_description": "Which of the following best describes a do...while loop?",
                        "options": [
                            "Executes a statement only if the condition is true",
                            "Executes a statement at least once before checking the condition",
                            "Executes a statement if the condition is true at the beginning",
                            "Executes a statement only once"
                        ],
                        "correct_answers": ["Executes a statement at least once before checking the condition"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the structure of a do...while loop.",
                        "question_description": "In a do...while loop, the condition is evaluated ____ the statement is executed.",
                        "options": ["before", "after", "during", "never"],
                        "correct_answers": ["after"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the syntax of a do...while loop.",
                        "question_description": "Which of the following is the correct syntax for a do...while loop in JavaScript?",
                        "options": [
                            "do { // code to be executed } until (condition);",
                            "while (condition) { // code to be executed } do;",
                            "do { // code to be executed } while (condition);",
                            "while (condition) { do // code to be executed }"
                        ],
                        "correct_answers": ["do { // code to be executed } while (condition);"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the looping behavior of a do...while loop.",
                        "question_description": "A do...while loop will always execute its statement at least ____.",
                        "options": ["once", "twice", "three times", "four times"],
                        "correct_answers": ["once"]
                    }
                ]
            },
            {
                "title" : "“while” statement",
                "theories_list" : [
                    "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement."
                ],
                "description" : "Iterating based on a condition.",
                "url" : "https://www.codeguage.com/courses/js/loops-while-loop",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider when the condition is evaluated in a while loop.",
                        "question_description": "In a while loop, the condition is evaluated before executing the statement.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the key characteristic of a while loop.",
                        "question_description": "Which of the following best describes a while loop?",
                        "options": [
                            "Executes a statement only if the condition is false",
                            "Executes a statement at least once before checking the condition",
                            "Executes a statement as long as the condition evaluates to true",
                            "Executes a statement a fixed number of times"
                        ],
                        "correct_answers": ["Executes a statement as long as the condition evaluates to true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the structure of a while loop.",
                        "question_description": "In a while loop, the condition is evaluated ____ the statement is executed.",
                        "options": ["before", "after", "during", "never"],
                        "correct_answers": ["before"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the syntax of a while loop.",
                        "question_description": "Which of the following is the correct syntax for a while loop in JavaScript?",
                        "options": [
                            "while { (condition) // code to be executed }",
                            "do { // code to be executed } while (condition);",
                            "while (condition) { // code to be executed }",
                            "while (condition); { // code to be executed }"
                        ],
                        "correct_answers": ["while (condition) { // code to be executed }"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the looping behavior of a while loop.",
                        "question_description": "A while loop will continue to execute its statement as long as the condition is ____.",
                        "options": ["false", "true", "undefined", "null"],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "“break/continue”",
                "theories_list" : [
                    "break statement, without a label reference, can only be used to jump out of a loop or a switch block.",
                    "continue statement, with or without a label reference, can only be used to skip one loop iteration."
                ],
                "description" : "Statements used to exit a loop or skip to the next iteration, respectively.",
                "url" : "https://www.w3schools.com/js/js_break.asp",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the use of the break statement.",
                        "question_description": "The break statement can be used to exit a loop or a switch block.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the effect of the continue statement within a loop.",
                        "question_description": "What does the continue statement do when used inside a loop?",
                        "options": [
                            "Exits the loop entirely",
                            "Skips the current iteration and moves to the next iteration",
                            "Ends the program",
                            "Restarts the loop from the beginning"
                        ],
                        "correct_answers": ["Skips the current iteration and moves to the next iteration"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how the break statement affects loop execution.",
                        "question_description": "The ____ statement is used to exit a loop or switch block immediately.",
                        "options": ["continue", "exit", "break", "stop"],
                        "correct_answers": ["break"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the usage scenarios for the continue statement.",
                        "question_description": "In which scenario would you use the continue statement?",
                        "options": [
                            "To terminate the loop",
                            "To skip the current iteration and continue with the next one",
                            "To exit the current function",
                            "To jump out of a switch block"
                        ],
                        "correct_answers": ["To skip the current iteration and continue with the next one"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the context in which the continue statement can be used.",
                        "question_description": "The continue statement can only be used within a ____.",
                        "options": ["function", "loop", "switch block", "object"],
                        "correct_answers": ["loop"]
                    }
                ]
            },
            {
                "title" : "Labeled statement",
                "theories_list" : [
                    "JavaScript label statements are used to prefix a label to an identifier. It can be used with break and continue statement to control the flow more precisely.\nA label is simply an identifier followed by a colon(:) that is applied to a block of code."
                ],
                "description" : "A label that provides a named reference for break and continue statements within nested loops.",
                "url" : "https://www.tutorialspoint.com/What-are-label-statements-in-JavaScript",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the use of labels with break and continue statements.",
                        "question_description": "Labels can be used with break and continue statements to control the flow of loops.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about what a label is in JavaScript.",
                        "question_description": "What is a label in JavaScript?",
                        "options": [
                            "A function name",
                            "A variable name",
                            "An identifier followed by a colon(:) applied to a block of code",
                            "A keyword used to declare a variable"
                        ],
                        "correct_answers": ["An identifier followed by a colon(:) applied to a block of code"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the purpose of labels in controlling loop flow.",
                        "question_description": "A label is used to provide a named reference for ____ and ____ statements within nested loops.",
                        "options": ["break, continue", "if, else", "switch, case", "try, catch"],
                        "correct_answers": ["break, continue"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the structure of a labeled statement.",
                        "question_description": "Which of the following is the correct syntax for a labeled statement in JavaScript?",
                        "options": [
                            "label { // code block }",
                            "label: { // code block }",
                            "label => { // code block }",
                            "label:: { // code block }"
                        ],
                        "correct_answers": ["label: { // code block }"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the application of labels in nested loops.",
                        "question_description": "Labels are especially useful in controlling the flow of nested ____.",
                        "options": ["functions", "objects", "loops", "arrays"],
                        "correct_answers": ["loops"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Control Flow",
        "description_short": "This lesson covers control flow statements in JavaScript, such as if, else, switch, and try...catch, which are used to control the execution of code based on certain conditions.",
        "description_long" : "In JavaScript, the Control flow is a way of how your computer runs code from top to bottom. It starts from the first line and ends at the last line unless it hits any statement that changes the control flow of the program such as loops, conditionals, etc.\nWe can control the flow of the program through any of these control structures:\n- Sequential (default mode)\n- Conditional Statements\n- Exception Handling\n- Loops and Iterations",
        "lessons" : [
            {
                "title" : "Conditional Statements",
                "theories_list" : [
                    "If…else:\n\nThe if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement in the optional else clause will be executed.",
                    "Switch:\n\nThe switch statement evaluates an expression, matching the expression’s value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered. The default clause of a switch statement will be jumped to if no case matches the expression’s value."
                ],
                "description" : "When you write code, you often want to perform different actions for different decisions. You can use conditional statements in your code to do this. In JavaScript, we have three conditional statements: if, if...else, and switch.",
                "url" : "https://javascript.info/ifelse",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider how the if statement works.",
                        "question_description": "The if statement executes a statement if a specified condition is truthy.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about what happens when no cases match in a switch statement.",
                        "question_description": "What does the switch statement do if no case matches the expression’s value?",
                        "options": [
                            "Throws an error",
                            "Exits the switch statement",
                            "Executes the default clause",
                            "Continues to the next statement after the switch block"
                        ],
                        "correct_answers": ["Executes the default clause"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the components of an if...else statement.",
                        "question_description": "The if statement executes a statement if a specified condition is ____; otherwise, the ____ clause will be executed.",
                        "options": ["truthy, else", "false, then", "true, else", "falsy, then"],
                        "correct_answers": ["truthy, else"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the structure of a switch statement.",
                        "question_description": "Which of the following correctly describes the switch statement?",
                        "options": [
                            "Evaluates an expression and executes all case clauses regardless of matching",
                            "Evaluates an expression, matches the value against case clauses, and executes statements after the first matching case until a break statement is encountered",
                            "Evaluates an expression and executes only the default clause",
                            "Evaluates an expression, matches the value against case clauses, and executes only the first matching case clause"
                        ],
                        "correct_answers": [
                            "Evaluates an expression, matches the value against case clauses, and executes statements after the first matching case until a break statement is encountered"
                        ]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the purpose of the default clause in a switch statement.",
                        "question_description": "The ____ clause in a switch statement is executed if no case matches the expression's value.",
                        "options": ["else", "finally", "default", "break"],
                        "correct_answers": ["default"]
                    }
                ]
            },
            {
                "title" : "Exception Handling",
                "theories_list" : [
                    "“throw” statement\n\nThe throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won’t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.",
                    "“Try/catch/finally”\n\nThese are ways of handling errors in your JavaScript code. Inside the try code block we have the code to run, inside the catch block we handle the errors, and inside the finally block we have code that runs after the execution of the previous code blocks, regardless of the result.",
                    "Utilizing Error Objects\n\nWhen a runtime error occurs, a new Error object is created and thrown. With this Error object, we can determine the type of the Error and handle it according to its type.",
                    "Types of Errors:\n\nBesides error constructors, Javascript also has other core Error constructors.\n\nFor example:\n\n- AggregateError\n- EvalError\n- InternalError\n- RangeError\n- ReferenceError\n- SyntaxError"
                ],
                "description" : "In JavaScript, all exceptions are simply objects. While the majority of exceptions are implementations of the global Error class, any old object can be thrown. With this in mind, there are two ways to throw an exception: directly via an Error object, and through a custom object.",
                "url" : "https://rollbar.com/guides/javascript/how-to-throw-exceptions-in-javascript/",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider what happens after a throw statement is executed.",
                        "question_description": "The throw statement stops the execution of the current function and passes control to the first catch block in the call stack.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the different blocks used in try/catch/finally.",
                        "question_description": "Which block in try/catch/finally is executed regardless of the result of the try and catch blocks?",
                        "options": [
                            "try",
                            "catch",
                            "finally",
                            "error"
                        ],
                        "correct_answers": ["finally"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider where you handle errors in try/catch/finally.",
                        "question_description": "Inside the ____ block we have the code to run, inside the ____ block we handle the errors.",
                        "options": ["try, catch", "try, finally", "catch, finally", "finally, catch"],
                        "correct_answers": ["try, catch"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the various error constructors in JavaScript.",
                        "question_description": "Which of the following is NOT a core Error constructor in JavaScript?",
                        "options": [
                            "SyntaxError",
                            "RangeError",
                            "ReferenceError",
                            "TypeError"
                        ],
                        "correct_answers": ["TypeError"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the use of Error objects in exception handling.",
                        "question_description": "When a runtime error occurs, a new ____ object is created and thrown.",
                        "options": ["Exception", "Error", "RuntimeError", "Catch"],
                        "correct_answers": ["Error"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Expressions and Operators I",
        "description_short" : "Students are introduced to various operators in JavaScript, including arithmetic, comparison, logical, and assignment operators, and how they are used to perform different operations on variables and values.",
        "description_long" : "At a high level, an expression is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely evaluate. The expression x = 7 is an example of the first type. This expression uses the = operator to assign the value seven to the variable x. The expression itself evaluates to 7. The expression 3 + 4 is an example of the second type. This expression uses the + operator to add 3 and 4 together and produces a value, 7. However, if it’s not eventually part of a bigger construct (for example, a variable declaration like const z = 3 + 4), its result will be immediately discarded — this is usually a programmer mistake because the evaluation doesn’t produce any effects. As the examples above also illustrate, all complex expressions are joined by operators, such as = and +.",
        "lessons" : [
            {
                "title" : "Assignment Operators",
                "theories_list" : [
                    "An assignment operator assigns a value to its left operand based on the value of its right operand. The simple assignment operator is equal (=), which assigns the value of its right operand to its left operand. That is, x = f() is an assignment expression that assigns the value of f() to x."
                ],
                "description" : "Operators that assign values to variables, such as '=', '+=', '-=', '*=', '/='",
                "url" : "https://javascript.info/operators#assignment",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider what the simple assignment operator does.",
                        "question_description": "The '=' operator assigns the value of its right operand to its left operand.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the variations of assignment operators in JavaScript.",
                        "question_description": "Which of the following is NOT an assignment operator in JavaScript?",
                        "options": [
                            "=",
                            "+=",
                            "-=",
                            "=="
                        ],
                        "correct_answers": ["=="]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the basic form of an assignment operation.",
                        "question_description": "The simple assignment operator is ____, which assigns the value of its right operand to its left operand.",
                        "options": ["=", "==", "===", "=>"],
                        "correct_answers": ["="]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how combined assignment operators work.",
                        "question_description": "What does the operator '+=' do?",
                        "options": [
                            "Adds the right operand to the left operand and assigns the result to the left operand",
                            "Subtracts the right operand from the left operand and assigns the result to the left operand",
                            "Multiplies the right operand with the left operand and assigns the result to the left operand",
                            "Divides the right operand by the left operand and assigns the result to the left operand"
                        ],
                        "correct_answers": [
                            "Adds the right operand to the left operand and assigns the result to the left operand"
                        ]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the combination of operators in one statement.",
                        "question_description": "The expression x += y is equivalent to x = x ____ y.",
                        "options": ["+", "-", "*", "/"],
                        "correct_answers": ["+"]
                    }
                ]
            },
            {
                "title" : "Comparison Operators",
                "theories_list" : [
                    "Comparison operators are the operators that compare values and return true or false. The operators include: >, <, >=, <=, ==, ===, != and !==."
                ],
                "description" : "Operators that compare two values, such as '==', '===', '!=', '!==', '>', '<', '>=', '<='.",
                "url" : "https://www.w3schools.com/js/js_comparisons.asp",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the outcome of comparison operations.",
                        "question_description": "Comparison operators in JavaScript return either true or false.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the strict equality operator in JavaScript.",
                        "question_description": "Which operator checks both value and type for equality?",
                        "options": [
                            "==",
                            "===",
                            "!=",
                            ">="
                        ],
                        "correct_answers": ["==="]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how the equality operators work.",
                        "question_description": "The '==' operator compares two values for equality without considering their ____.",
                        "options": ["type", "length", "size", "order"],
                        "correct_answers": ["type"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the operator that checks inequality without type conversion.",
                        "question_description": "Which of the following operators checks if two values are not equal and also considers their type?",
                        "options": [
                            "!=",
                            "!==",
                            ">",
                            "<"
                        ],
                        "correct_answers": ["!=="]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the use of comparison operators for greater than or less than checks.",
                        "question_description": "The operator '>' checks if the left operand is ____ than the right operand.",
                        "options": ["greater", "less", "equal", "not equal"],
                        "correct_answers": ["greater"]
                    }
                ]
            },
            {
                "title" : "Arithmetic operators",
                "theories_list" : [
                    "The Arithmetic operators perform addition, subtraction, multiplication, division, exponentiation, and remainder operations.",
                    "Arithmetic operators in JavaScript are as follows:\n\n- Addition (+)\n- Subtraction (-)\n- Multiplication (*)\n- Exponentiation (**)\n- Division (/)\n- Modulus i.e. Remainder (%)\n- Increment (++)\n- Decrement (--)"
                ],
                "description" : "Operators that perform mathematical operations, such as '+', '-', '*', '/', '%', '++', '--'.",
                "url" : "https://javascript.info/operators#maths",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the operations performed by arithmetic operators.",
                        "question_description": "The '+' operator is used for addition in JavaScript.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the operator used for exponentiation.",
                        "question_description": "Which operator is used for exponentiation in JavaScript?",
                        "options": [
                            "+",
                            "*",
                            "**",
                            "%"
                        ],
                        "correct_answers": ["**"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the remainder operation.",
                        "question_description": "The ____ operator is used to find the remainder of a division in JavaScript.",
                        "options": ["%", "/", "*", "-"],
                        "correct_answers": ["%"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the operator used for incrementing a value by one.",
                        "question_description": "Which operator is used to increment a variable by one in JavaScript?",
                        "options": [
                            "+=",
                            "++",
                            "--",
                            "+"
                        ],
                        "correct_answers": ["++"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the operations for decrementing a value.",
                        "question_description": "The operator '--' is used to ____ a variable by one.",
                        "options": ["increment", "decrement", "multiply", "divide"],
                        "correct_answers": ["decrement"]
                    }
                ]
            },
            {
                "title" : "Logical Operators",
                "theories_list" : [
                    "There are four logical operators in JavaScript:\n\n- Logical AND (&&)\n- Logical OR (||)\n- Logical NOT (!)\n- Logical nullish assignment (??)"
                ],
                "description" : "Operators that combine boolean values, such as '&&', '||', '!'.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider how logical OR combines values.",
                        "question_description": "The '||' operator returns true if either operand is true.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the operator that inverts boolean values.",
                        "question_description": "Which operator is used to invert a boolean value in JavaScript?",
                        "options": [
                            "&&",
                            "||",
                            "!",
                            "??"
                        ],
                        "correct_answers": ["!"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the logical AND operation.",
                        "question_description": "The ____ operator returns true only if both operands are true.",
                        "options": ["&&", "||", "!", "??"],
                        "correct_answers": ["&&"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the operator used for nullish assignment.",
                        "question_description": "Which operator is used for nullish assignment in JavaScript?",
                        "options": [
                            "&&",
                            "||",
                            "!",
                            "??"
                        ],
                        "correct_answers": ["??"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how logical NOT modifies boolean values.",
                        "question_description": "The operator '!' is used to ____ a boolean value.",
                        "options": ["combine", "invert", "compare", "assign"],
                        "correct_answers": ["invert"]
                    }
                ]
            },
            {
                "title" : "String Operators",
                "theories_list" : [
                    "In addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates two string values together, returning another string that is the union of the two operand strings.\nThe shorthand assignment operator += can also be used to concatenate strings."
                ],
                "description" : "Operators that manipulate string values, including concatenation using '+'.",
                "url" : "https://javascript.info/operators#string-concatenation-with-binary",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider how the '+' operator works with strings.",
                        "question_description": "The '+' operator is used to concatenate two strings in JavaScript.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the operator used for concatenating strings.",
                        "question_description": "Which operator is used to concatenate two strings in JavaScript?",
                        "options": [
                            "+",
                            "-",
                            "*",
                            "/"
                        ],
                        "correct_answers": ["+"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how to append a string to an existing string.",
                        "question_description": "To concatenate a string to an existing string using shorthand, you can use the ____ operator.",
                        "options": ["+", "-", "*", "+="],
                        "correct_answers": ["+="]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the behavior of concatenation with strings.",
                        "question_description": "What will be the result of the expression 'Hello ' + 'World'?",
                        "options": [
                            "'Hello World'",
                            "'Hello'",
                            "'World'",
                            "'Hello' + 'World'"
                        ],
                        "correct_answers": ["'Hello World'"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Think about how to combine two strings into one.",
                        "question_description": "The expression 'Hello ' + 'World' results in ____.",
                        "options": ["'Hello World'", "'Hello'", "'World'", "'Hello' + 'World'"],
                        "correct_answers": ["'Hello World'"]
                    }
                ]
            },
            {
                "title" : "Conditional Operators",
                "theories_list" : [
                    "Conditional operator also known as Ternary operator is the only JS operator that takes three operands.\nThe operator can have one of two values based on a condition.\nSyntax: condition ? val_for_true : val_for_false"
                ],
                "description" : "The ternary operator '? :' that returns one of two values based on a condition.",
                "url" : "https://www.w3schools.com/js/js_comparisons.asp",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the basic functionality of the ternary operator.",
                        "question_description": "The conditional (ternary) operator takes three operands.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the syntax of the ternary operator.",
                        "question_description": "What is the correct syntax for using the ternary operator in JavaScript?",
                        "options": [
                            "condition ? val_for_true : val_for_false",
                            "condition : val_for_true ? val_for_false",
                            "condition ? val_for_true val_for_false",
                            "condition val_for_true ? : val_for_false"
                        ],
                        "correct_answers": ["condition ? val_for_true : val_for_false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how to structure the ternary operator.",
                        "question_description": "The ternary operator has the following syntax: condition ? ____ : ____.",
                        "options": ["val_for_true", "val_for_false", "condition", "value"],
                        "correct_answers": ["val_for_true", "val_for_false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about what the ternary operator returns based on a condition.",
                        "question_description": "What will be the result of the expression '5 > 3 ? 'Yes' : 'No' ?",
                        "options": [
                            "'Yes'",
                            "'No'",
                            "'5 > 3 ? 'Yes' : 'No''",
                            "'Yes : No'"
                        ],
                        "correct_answers": ["'Yes'"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider what the ternary operator returns when the condition is true.",
                        "question_description": "In the expression '5 > 3 ? 'Yes' : 'No'', if the condition is true, the result will be ____.",
                        "options": ["'Yes'", "'No'", "'5 > 3'", "'Yes : No'"],
                        "correct_answers": ["'Yes'"]
                    }
                ]
            },
            {
                "title" : "Comma Operator",
                "theories_list" : [
                    "The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand. This lets you create a compound expression in which multiple expressions are evaluated, with the compound expression’s final value being the value of the rightmost of its member expressions. This is commonly used to provide multiple parameters to a for loop."
                ],
                "description" : "An operator that allows multiple expressions to be evaluated in a single statement, returning the last expression's value." ,
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "The comma operator returns the value of the last expression.",
                        "question_description": "The comma operator evaluates all expressions and returns the value of the first expression.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about what happens when multiple expressions are separated by commas.",
                        "question_description": "What is the result of the expression '1, 2, 3' using the comma operator?",
                        "options": [
                            "1",
                            "2",
                            "3",
                            "undefined"
                        ],
                        "correct_answers": ["3"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider how the comma operator processes multiple expressions.",
                        "question_description": "In the expression 'x = (a = 1, b = 2, c = 3)', the value assigned to x will be ____.",
                        "options": ["1", "2", "3", "undefined"],
                        "correct_answers": ["3"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the common use case for the comma operator.",
                        "question_description": "Where is the comma operator commonly used in JavaScript?",
                        "options": [
                            "In for loop initialization and updates",
                            "In function parameters",
                            "In variable declarations",
                            "In object literals"
                        ],
                        "correct_answers": ["In for loop initialization and updates"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the comma operator's role in expressions within a for loop.",
                        "question_description": "The comma operator allows multiple expressions to be evaluated in a single statement, returning the value of the ____ expression.",
                        "options": ["first", "second", "last", "only"],
                        "correct_answers": ["last"]
                    }
                ]
            },
            {
                "title" : "Unary Operators",
                "theories_list" : [
                    "JavaScript Unary Operators are the special operators that consider a single operand and perform all the types of operations on that single operand. These operators include unary plus, unary minus, prefix increments, postfix increments, prefix decrements, and postfix decrements."
                ],
                "description" : "Operators that operate on a single operand, such as 'typeof', 'delete', 'void', '+', '-', '!'.",
                "url" : "https://www.educba.com/unary-operators-in-javascript/",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Unary operators require only a single operand to function.",
                        "question_description": "Unary operators in JavaScript require more than one operand.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Unary operators include operations like incrementing and negating.",
                        "question_description": "Which of the following is a unary operator?",
                        "options": [
                            "&&",
                            "||",
                            "+",
                            "*"
                        ],
                        "correct_answers": ["+"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Unary operators work with a single operand.",
                        "question_description": "The 'typeof' operator is an example of a ____ operator.",
                        "options": ["binary", "unary", "ternary", "assignment"],
                        "correct_answers": ["unary"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider operators that modify the operand's value.",
                        "question_description": "Which of the following operators is used for prefix increment?",
                        "options": [
                            "++a",
                            "a++",
                            "a--",
                            "--a"
                        ],
                        "correct_answers": ["++a"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Unary operators modify the value directly.",
                        "question_description": "The unary operator '!' is used to ____ the boolean value of its operand.",
                        "options": ["invert", "increment", "decrement", "add"],
                        "correct_answers": ["invert"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "BEGINNER",
        "title" : "Functions I",
        "description_short" : "This lesson covers the basics of functions in JavaScript, including function declarations, expressions, parameters, and arrow functions, emphasizing their importance in creating reusable code blocks.",
        "description_long" : "Functions exist so we can reuse code. They are blocks of code that execute whenever they are invoked. Each function is typically written to perform a particular task, like an addition function used to find the sum of two or more numbers. When numbers need to be added anywhere within your code, the addition function can be invoked as many times as necessary.",
        "lessons" : [
            {
                "title" : "Function Parameters",
                "theories_list" : [
                    "The parameter is the name given to the variable declared inside the definition of a function. There are two special kinds of syntax: default and rest parameters.",
                    "Default Params:\n\nDefault function parameters allow named parameters to be initialized with default values if no value or undefined is passed.",
                    "Rest Params:\n\nThe rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript."
                ],
                "description" : "Passing values into functions.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Default parameters are used when no value is provided for a parameter.",
                        "question_description": "Default function parameters can only be used if the value is `undefined` or not provided.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how functions handle multiple arguments.",
                        "question_description": "What does the rest parameter syntax allow a function to do?",
                        "options": [
                            "Accept a fixed number of arguments",
                            "Ignore additional arguments",
                            "Accept an indefinite number of arguments as an array",
                            "Provide default values for parameters"
                        ],
                        "correct_answers": ["Accept an indefinite number of arguments as an array"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Default parameters provide fallback values.",
                        "question_description": "In JavaScript, default parameters are used to provide default values when ____ is not passed.",
                        "options": ["null", "undefined", "true", "false"],
                        "correct_answers": ["undefined"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Identify the special syntax for default parameter values.",
                        "question_description": "Which of the following syntax represents a default parameter?",
                        "options": [
                            "function myFunction(param = defaultValue) {}",
                            "function myFunction(param) {} = defaultValue",
                            "function myFunction(param: defaultValue) {}",
                            "function myFunction(defaultValue) param {}"
                        ],
                        "correct_answers": ["function myFunction(param = defaultValue) {}"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Rest parameters collect additional arguments.",
                        "question_description": "The rest parameter syntax in a function is represented by the ____ symbol.",
                        "options": ["@", "$", "&", "..."],
                        "correct_answers": ["..."]
                    }
                ]
            },
            {
                "title" : "Arrow Functions",
                "theories_list" : [
                    "Arrow Function is a new way of creating functions with the “=>” operator with a shorter syntax."
                ],
                "description" : "Concise syntax for defining functions.",
                "url" : "https://www.w3schools.com/js/js_arrow_function.asp",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Arrow functions have a shorter syntax compared to regular function expressions.",
                        "question_description": "Which of the following is the correct syntax for an arrow function that takes one parameter and returns its square?",
                        "options": [
                            "const square = x => x * x;",
                            "const square = function(x) { return x * x; };",
                            "const square = (x) { return x * x; };",
                            "const square = x : x * x;"
                        ],
                        "correct_answers": ["const square = x => x * x;"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Arrow functions do not have their own `this` binding.",
                        "question_description": "Arrow functions have their own `this` binding.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how arrow functions differ from regular functions regarding `this`.",
                        "question_description": "How does an arrow function handle the `this` keyword compared to a regular function?",
                        "options": [
                            "Arrow functions create their own `this` binding.",
                            "Arrow functions inherit `this` from the enclosing lexical scope.",
                            "Arrow functions have no `this` binding.",
                            "Arrow functions require `this` to be explicitly passed as a parameter."
                        ],
                        "correct_answers": ["Arrow functions inherit `this` from the enclosing lexical scope."]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Arrow functions use a different syntax for the function keyword.",
                        "question_description": "In an arrow function, the function keyword is replaced with ____.",
                        "options": ["=>", "->", "=>=", "->="],
                        "correct_answers": ["=>"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Arrow functions are particularly useful for simple one-line operations.",
                        "question_description": "Arrow functions can be used to create functions with only one expression, which will automatically return the result of that expression.",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "Built in functions",
                "theories_list" : [
                    "A JavaScript method is a property containing a function definition . In other words, when the data stored on an object is a function we call that a method.",
                    "To differentiate between properties and methods, we can think of it this way: A property is what an object has, while a method is what an object does.",
                    "Since JavaScript methods are actions that can be performed on objects, we first need to have objects to start with. There are several objects built into JavaScript which we can use."
                ],
                "description" : "Predefined functions provided by JavaScript, such as alert(), parseInt(), and setTimeout(), which perform common tasks." ,
                "url" : "https://www.tutorialspoint.com/javascript/javascript_builtin_functions.htm",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider common functions used to display alerts or handle timing.",
                        "question_description": "Which of the following is a built-in JavaScript function used to display an alert box?",
                        "options": [
                            "alert()",
                            "prompt()",
                            "console.log()",
                            "document.write()"
                        ],
                        "correct_answers": ["alert()"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "parseInt() is used to convert strings to numbers.",
                        "question_description": "The parseInt() function is used to convert a string into an integer in JavaScript.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider functions that perform actions after a certain delay.",
                        "question_description": "Which built-in JavaScript function calls a function or evaluates an expression after a specified number of milliseconds?",
                        "options": [
                            "setInterval()",
                            "setTimeout()",
                            "clearTimeout()",
                            "clearInterval()"
                        ],
                        "correct_answers": ["setTimeout()"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Think about the function that evaluates a string as JavaScript code.",
                        "question_description": "The ____ function evaluates a string of JavaScript code in the context of the caller.",
                        "options": ["eval()", "execute()", "parse()", "run()"],
                        "correct_answers": ["eval()"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider methods that belong to specific objects.",
                        "question_description": "Which of the following is a method of the console object in JavaScript?",
                        "options": [
                            "console.alert()",
                            "console.print()",
                            "console.log()",
                            "console.write()"
                        ],
                        "correct_answers": ["console.log()"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Expressions and Operators II",
        "description_short" : "This is the level 2 of Expressions and Operators course",
        "description_long" : "This lesson dives into more complex operators, including bitwise operators and BigInt operators, which perform operations on binary representations and large integers.",
        "lessons" : [
            {
                "title" : "Bitwise operators",
                "theories_list" : [
                    "Bitwise operators treat arguments as 32-bits (zeros & ones) and work on the level of their binary representation. Ex. Decimal number 9 has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
                    "Bitwise operators in JavaScript are as follows:\n\n- Bitwise AND (&)\n- Bitwise OR (|)\n- Bitwise XOR (^)\n- Bitwise NOT (~)\n- Left shift (<<)\n- Sign-propagating right shift (>>)\n- Zero-fill right shift (>>>)"
                ],
                "description" : "Manipulating binary representations of numbers.",
                "url" : "https://javascript.info/operators#bitwise-operators",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This operator returns a bit set to 1 if and only if both of the corresponding bits of its operands are also 1.",
                        "question_description": "Which bitwise operator performs a bitwise AND operation?",
                        "options": [
                            "&",
                            "|",
                            "^",
                            "~"
                        ],
                        "correct_answers": ["&"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This operator returns a bit set to 1 if at least one of the corresponding bits of its operands is 1.",
                        "question_description": "Which bitwise operator performs a bitwise OR operation?",
                        "options": [
                            "&",
                            "|",
                            "^",
                            "~"
                        ],
                        "correct_answers": ["|"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "The NOT operator inverts each bit of its operand.",
                        "question_description": "The bitwise NOT operator (~) inverts all the bits of its operand.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This operator shifts the first operand the specified number of bits to the left, with zeroes shifted in from the right.",
                        "question_description": "Which bitwise operator performs a left shift operation?",
                        "options": [
                            "<<",
                            ">>",
                            ">>>",
                            "^^"
                        ],
                        "correct_answers": ["<<"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "This operator shifts bits to the right while filling with zeroes from the left.",
                        "question_description": "The ____ operator performs a zero-fill right shift.",
                        "options": ["<<", ">>", ">>>", "^^"],
                        "correct_answers": [">>>"]
                    }
                ]
            },
            {
                "title" : "BigInt Operators",
                "theories_list" : [
                    "Most operators that can be used with the Number data type will also work with BigInt values (e.g. arithmetic, comparison, etc.). However, the unsigned right shift >>> operator is an exception and is not supported. Similarly, some operators may have slight differences in behaviour (for example, division with BigInt will round towards zero)."
                ],
                "description" : "Working with very large integers.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bigint_operators",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This arithmetic operation rounds towards zero when used with BigInt.",
                        "question_description": "How does division behave when used with BigInt values?",
                        "options": [
                            "It rounds towards zero",
                            "It rounds towards infinity",
                            "It throws an error",
                            "It rounds towards negative infinity"
                        ],
                        "correct_answers": ["It rounds towards zero"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This bitwise operator is not supported for BigInt.",
                        "question_description": "Which of the following operators is not supported for BigInt values?",
                        "options": [
                            "&",
                            "|",
                            "^",
                            ">>>"
                        ],
                        "correct_answers": [">>>"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "BigInt values can be compared using standard comparison operators.",
                        "question_description": "Standard comparison operators (e.g., <, >, ==) can be used with BigInt values.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "BigInt is suitable for operations involving very large numbers.",
                        "question_description": "What is one primary use case for BigInt in JavaScript?",
                        "options": [
                            "Handling floating-point arithmetic",
                            "Working with very large integers",
                            "Performing high-precision decimal calculations",
                            "Handling small integers efficiently"
                        ],
                        "correct_answers": ["Working with very large integers"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "BigInt values have their own set of arithmetic operations.",
                        "question_description": "Most operators used with the ______ data type will also work with BigInt values.",
                        "options": ["Number", "String", "Boolean", "Symbol"],
                        "correct_answers": ["Number"]
                    }
                ]
            },
            {
                "title" : "Relational Operators",
                "theories_list" : [
                    "Relational operators are also known as comparison operators. They are used to find the relationship between two values or compare the relationship between them; on the comparison, they yield the result true or false."
                ],
                "description" : "Operators used to compare the relationship between two values, such as '<', '<=','>', and '>='.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#relational_operators",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This operator checks if one value is less than or equal to another.",
                        "question_description": "Which operator would you use to check if a value is less than or equal to another value?",
                        "options": [
                            "<",
                            "<=",
                            ">",
                            ">="
                        ],
                        "correct_answers": ["<="]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Relational operators can only return boolean values.",
                        "question_description": "Relational operators in JavaScript can return values other than true or false.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "The '>' operator compares if one value is greater than another.",
                        "question_description": "The relational operator ______ checks if a value is greater than another value.",
                        "options": [">", "<", "<=", ">="],
                        "correct_answers": [">"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This operator checks if a value is not greater than or equal to another value.",
                        "question_description": "Which relational operator would you use to check if a value is less than another value?",
                        "options": [
                            "<",
                            "<=",
                            ">",
                            ">="
                        ],
                        "correct_answers": ["<"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "The result of this comparison can be true or false based on the values compared.",
                        "question_description": "What is the result type of relational operators in JavaScript?",
                        "options": [
                            "Number",
                            "String",
                            "Boolean",
                            "Object"
                        ],
                        "correct_answers": ["Boolean"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Functions II",
        "description_short" :"This is the level 2 of Functions course",
        "description_long" : "Students learn advanced function concepts, such as higher-order functions, closures, and the use of the this keyword, to write more powerful and flexible code.",
        "lessons" : [
            {
                "title" : "Arguments object",
                "theories_list" : [
                    "The arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function, available within all non-arrow functions. You can refer to a function’s arguments inside that function by using its arguments object. It has entries for each argument the function was called with, with the first entry’s index at 0. But, in modern code, rest parameters should be preferred."
                ],
                "description" : "An array-like object accessible within functions that contains the values of the arguments passed to the function.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This is used to access arguments within a function.",
                        "question_description": "What is the name of the object that allows access to function arguments in JavaScript?",
                        "options": [
                            "params",
                            "arguments",
                            "args",
                            "functionArguments"
                        ],
                        "correct_answers": ["arguments"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Arrow functions do not have access to this object.",
                        "question_description": "The `arguments` object is available inside arrow functions in JavaScript.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "This object is not an actual array but has a similar structure.",
                        "question_description": "The `arguments` object is an ________-like object that provides access to function parameters.",
                        "options": ["Array", "String", "Object", "Function"],
                        "correct_answers": ["Array"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Modern JavaScript prefers this syntax for handling a variable number of arguments.",
                        "question_description": "What is the modern alternative to using the `arguments` object for handling a variable number of parameters in a function?",
                        "options": [
                            "default parameters",
                            "spread operator",
                            "rest parameters",
                            "object destructuring"
                        ],
                        "correct_answers": ["rest parameters"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "The index starts from 0 for this object.",
                        "question_description": "How is the `arguments` object indexed?",
                        "options": [
                            "Starting from 1",
                            "Starting from 0",
                            "Starting from -1",
                            "Starting from 2"
                        ],
                        "correct_answers": ["Starting from 0"]
                    }
                ]
            },
            {
                "title" : "Scope and function stack",
                "theories_list" : [
                    "Scope\n\nA space or environment in which a particular variable or function can be accessed or used. Accessibility of this variable or function depends on where it is defined.",
                    "JavaScript has the following kinds of scopes:\n\n- Global scope: The default scope for all code running in script mode.\n- Module scope: The scope for code running in module mode.\n- Function scope: The scope created with a function.\n- Block scope: The scope created with a pair of curly braces (a block).",
                    "Function Stack (Call stack)\n\nThe function stack is how the interpreter keeps track of its place in a script that calls multiple functions, like which function is currently executing and which functions within that function are being called.",
                    "Recursion:\n\nOne of the most powerful and elegant concept of functions, recursion is when a function invokes itself. Such a function is called a recursive function. As recursion happens, the underlying code of the recursive function gets executed again and again until a terminating condition, called the base case, gets fulfilled. As you dive into the world of algorithms, you’ll come across recursion in many many instances.",
                    "Lexical scoping:\n\nBefore one can make an intuition of closures in JavaScript, it’s important to first get the hang of the term ‘lexical environment’. In simple words, the lexical environment for a function f simply refers to the environment enclosing that function’s definition in the source code.",
                    "Closures:\n\nFunction closures are one of the most powerful, yet most misunderstood, concepts of JavaScript that are actually really simple to understand. A closure refers to a function along with its lexical environment. It is essentially what allows us to return a function A, from another function B, that remembers the local variables defined in B, even after B exits. The idea of closures is employed in nearly every other JavaScript program, hence, it’s paramount for a JavaScript developer to know it really well."
                ],
                "description" : "The context in which variables are accessible and the order of function calls leading to the current execution point.",
                "url" : "https://developer.mozilla.org/en-US/docs/Glossary/Scope",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about where variables can be accessed from within different parts of your code.",
                        "question_description": "What is the scope of a variable declared outside any function in JavaScript?",
                        "options": [
                            "Block scope",
                            "Function scope",
                            "Global scope",
                            "Module scope"
                        ],
                        "correct_answers": ["Global scope"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Closures involve a function and its lexical environment.",
                        "question_description": "A closure in JavaScript is a function that retains access to its lexical environment, even after the function has finished executing.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Recursion involves a function calling itself.",
                        "question_description": "In JavaScript, a function that calls itself is known as a ________ function.",
                        "options": ["recursive", "closure", "lexical", "anonymous"],
                        "correct_answers": ["recursive"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about which environments are created with function declarations.",
                        "question_description": "What type of scope is created by a function in JavaScript?",
                        "options": [
                            "Global scope",
                            "Block scope",
                            "Function scope",
                            "Module scope"
                        ],
                        "correct_answers": ["Function scope"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider what happens when a function is executed and what it does with its local variables.",
                        "question_description": "What does a closure in JavaScript allow a function to do?",
                        "options": [
                            "Access variables from the global scope",
                            "Access its own local variables after it has finished executing",
                            "Access variables from its parent function's scope",
                            "Access only variables from its immediate block"
                        ],
                        "correct_answers": ["Access its own local variables after it has finished executing", "Access variables from its parent function's scope"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Strict Mode",
        "description_short" : "This lesson introduces strict mode in JavaScript, which helps catch common coding mistakes and ensures cleaner code by enforcing stricter parsing and error handling.",
        "description_long" : "Strict mode helps catch common coding mistakes and ensures cleaner code by enforcing stricter parsing and error handling. This lesson introduces how to enable strict mode and the benefits it provides. Students will learn about the restrictions and errors that strict mode enforces, helping them write more secure and robust JavaScript code.",
        "lessons" : [
            {
                "title": "" ,
                "theories_list" : [
                    "JavaScript’s strict mode is a way to opt-in to a restricted variant of JavaScript, thereby implicitly opting out of “sloppy mode”. Strict mode isn’t just a subset: it intentionally has different semantics from regular code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don’t rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist so that scripts can opt into strict mode incrementally.",
                    "Strict mode makes several changes to normal JavaScript semantics:\n\n- Eliminates some JavaScript silent errors by changing them to throw errors.\n- Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes run faster than identical code that’s not strict mode.\n- Prohibits some syntax likely to be defined in future versions of ECMAScript."
                ],
                "description" : "A way to opt in to a restricted variant of JavaScript by using 'use strict' to enforce stricter parsing and error handling.",
                "url" : "https://javascript.info/strict-mode",
                "questions": [
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Strict mode affects how errors are handled and what syntax is allowed.",
                        "question_description": "Strict mode in JavaScript can help improve performance by optimizing code execution.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about how strict mode changes JavaScript’s behavior.",
                        "question_description": "Which of the following is a feature of JavaScript strict mode?",
                        "options": [
                            "Eliminates syntax errors and silent errors",
                            "Allows the use of undeclared variables",
                            "Allows the use of reserved keywords as variable names",
                            "Automatically converts strings to numbers"
                        ],
                        "correct_answers": ["Eliminates syntax errors and silent errors"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Strict mode must be enabled at the beginning of a script or function.",
                        "question_description": "To enable strict mode in JavaScript, you must include the statement ‘______’ at the beginning of your script or function.",
                        "options": ["'use strict'", "'strict mode'", "'enforce strict'", "'enable strict'"],
                        "correct_answers": ["'use strict'"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider what strict mode disallows that regular mode permits.",
                        "question_description": "Which of the following will cause an error in strict mode but not in non-strict mode?",
                        "options": [
                            "Using the ‘eval’ function",
                            "Assigning to an undeclared variable",
                            "Using ‘console.log’",
                            "Defining a function within another function"
                        ],
                        "correct_answers": ["Assigning to an undeclared variable"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Strict mode changes the handling of certain syntaxes.",
                        "question_description": "Strict mode allows the use of future reserved keywords in JavaScript.",
                        "options": [],
                        "correct_answers": ["false"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Using (this) keyword",
        "description_short" : "Students learn the intricacies of the this keyword in JavaScript, including its behavior in different contexts and how to control its value using methods like call, apply, and bind.",
        "description_long" : "In JavaScript, the this keyword is a little different compared to other languages. It refers to an object, but it depends on how or where it is being invoked. It also has some differences between strict mode and non-strict mode.\n\n- In an object method, this refers to the object\n- Alone, this refers to the global object\n- In a function, this refers to the global object\n- In a function, in strict mode, this is undefined\n- In an event, this refers to the element that received the event\n- Methods like call(), apply(), and bind() can refer this to any object",
        "lessons" : [
            {
                "title" : "Function Borrowing",
                "theories_list" : [
                    "Function borrowing allows us to use the methods of one object on a different object without having to make a copy of that method and maintain it in two separate places. It is accomplished through the use of .call(), .apply(), or .bind(), all of which exist to explicitly set this on the method we are borrowing."
                ],
                "description" : "Using a method from one object on a different object by setting the 'this' context to the borrowing object.",
                "url" : "https://medium.com/@ensallee/function-borrowing-in-javascript-4bd671e9d7b4",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the methods available for changing the 'this' context.",
                        "question_description": "Which method(s) allow you to borrow a function from one object to another?",
                        "options": [
                            ".call()",
                            ".apply()",
                            ".bind()",
                            "All of the above"
                        ],
                        "correct_answers": ["All of the above"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about how function borrowing affects the 'this' context.",
                        "question_description": "Function borrowing requires copying the method to the new object.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Fill in the method used to borrow a function and change the 'this' context.",
                        "question_description": "To use a method of one object on another object, you can use the __________ method to explicitly set the 'this' context.",
                        "options": ["call", "apply", "bind", "both 'call' and 'apply'"],
                        "correct_answers": ["both 'call' and 'apply'"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Choose the correct method based on its description.",
                        "question_description": "Which of the following is true about the .bind() method?",
                        "options": [
                            ".bind() immediately invokes the function with the given context.",
                            ".bind() returns a new function that, when called, has its 'this' keyword set to the provided value.",
                            ".bind() changes the 'this' context only once and cannot be used to create reusable functions.",
                            ".bind() is used to apply an array of arguments to a function."
                        ],
                        "correct_answers": [".bind() returns a new function that, when called, has its 'this' keyword set to the provided value."]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about what .apply() does compared to .call().",
                        "question_description": ".apply() can be used to borrow methods and allows you to pass arguments as an array.",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "“this” in a method",
                "theories_list" : [
                    "Methods are properties of an object which are functions. The value of this inside a method is equal to the calling object. In simple words, this value is the object “before dot”, the one used to call the method."
                ],
                "description" : "Refers to the object that is calling the method.",
                "url" : "https://javascript.info/object-methods#this-in-methods",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about which object 'this' refers to when calling a method.",
                        "question_description": "In the context of an object method, what does 'this' refer to?",
                        "options": [
                            "The global object",
                            "The function where 'this' is defined",
                            "The object that owns the method",
                            "The method itself"
                        ],
                        "correct_answers": ["The object that owns the method"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the behavior of 'this' when calling methods.",
                        "question_description": "'this' in a method always refers to the global object.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Fill in the blank with the object that 'this' refers to when inside a method.",
                        "question_description": "When a method is called, 'this' refers to the object __________.",
                        "options": ["defining the method", "calling the method", "containing the method", "executing the method"],
                        "correct_answers": ["calling the method"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about what happens to 'this' in nested methods.",
                        "question_description": "What happens to the value of 'this' in a nested method call within the same object?",
                        "options": [
                            "'this' value remains the same as in the outer method",
                            "'this' refers to the inner method",
                            "'this' changes to the global object",
                            "'this' becomes undefined"
                        ],
                        "correct_answers": ["'this' value remains the same as in the outer method"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Reflect on the behavior of 'this' in the case of method borrowing.",
                        "question_description": "'this' in a borrowed method can be set to a different object using .call() or .apply().",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "“this” in a function",
                "theories_list" : [
                    "The keyword this when used in a function refers to the global object.\n\nNote: in a browser window the global object is the window object."
                ],
                "description" : "Refers to the global object (or 'undefined' in strict mode) when used in a regular function.",
                "url" : "https://www.w3schools.com/js/js_this.asp",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider what 'this' refers to in a regular function versus a method.",
                        "question_description": "In a regular function, what does 'this' refer to?",
                        "options": [
                            "The object that calls the function",
                            "The function itself",
                            "The global object",
                            "undefined"
                        ],
                        "correct_answers": ["The global object"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the behavior of 'this' in different modes.",
                        "question_description": "'In strict mode, 'this' in a regular function refers to the global object.'",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Reflect on what 'this' points to when no object context is present.",
                        "question_description": "When a function is called without an object context, 'this' refers to __________.",
                        "options": ["the window object", "undefined", "the function itself", "null"],
                        "correct_answers": ["undefined"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how 'this' behaves in regular functions versus methods.",
                        "question_description": "Which of the following statements about 'this' in a regular function is true?",
                        "options": [
                            "'this' always refers to the function itself",
                            "'this' refers to the global object in non-strict mode",
                            "'this' refers to the calling object",
                            "'this' is undefined in both strict and non-strict modes"
                        ],
                        "correct_answers": ["'this' refers to the global object in non-strict mode"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the default behavior of 'this' in non-strict mode functions.",
                        "question_description": "'In a browser environment, 'this' in a regular function without strict mode refers to the window object.'",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "Using “this” alone",
                "theories_list" : [
                    "The keyword this when used alone refers to the global object.\n\nNote: in a browser window the global object is the window object."
                ],
                "description" : "Refers to the global object in non-strict mode and 'undefined' in strict mode.",
                "url" : "https://www.w3schools.com/js/js_this.asp",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider what 'this' will refer to in different JavaScript modes.",
                        "question_description": "In non-strict mode, what does 'this' refer to when used alone?",
                        "options": [
                            "The function itself",
                            "The global object",
                            "undefined",
                            "null"
                        ],
                        "correct_answers": ["The global object"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about how strict mode affects 'this'.",
                        "question_description": "'In strict mode, 'this' when used alone refers to the global object.'",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Reflect on what 'this' refers to in strict versus non-strict mode.",
                        "question_description": "When 'this' is used alone in strict mode, it refers to __________.",
                        "options": ["the window object", "null", "undefined", "the global object"],
                        "correct_answers": ["undefined"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the impact of strict mode on the value of 'this'.",
                        "question_description": "Which of the following statements about 'this' used alone in non-strict mode is true?",
                        "options": [
                            "'this' refers to the function that called it",
                            "'this' refers to the global object",
                            "'this' is always undefined",
                            "'this' refers to null"
                        ],
                        "correct_answers": ["'this' refers to the global object"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about what 'this' refers to in strict mode.",
                        "question_description": "'In a browser environment, 'this' used alone in strict mode is undefined.'",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "“this” in event handlers",
                "theories_list" : [
                    "The keyword this when used in an event handler refers to the element that received the event."
                ],
                "description" : "Refers to the element that received the event.",
                "url" : "https://www.w3schools.com/js/js_this.asp",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about what 'this' represents in the context of an event handler.",
                        "question_description": "In an event handler, what does 'this' refer to?",
                        "options": [
                            "The global object",
                            "The function itself",
                            "The element that triggered the event",
                            "The event object"
                        ],
                        "correct_answers": ["The element that triggered the event"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider how 'this' changes based on where it is used.",
                        "question_description": "'In an event handler, 'this' always refers to the element that received the event.'",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Reflect on the role of 'this' within event handler functions.",
                        "question_description": "In an event handler function, 'this' refers to the __________.",
                        "options": ["global object", "function", "element that triggered the event", "event object"],
                        "correct_answers": ["element that triggered the event"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the difference between 'this' in event handlers and 'this' in regular functions.",
                        "question_description": "Which statement about 'this' in event handlers is correct?",
                        "options": [
                            "'this' in an event handler refers to the global object.",
                            "'this' in an event handler refers to the function that is handling the event.",
                            "'this' in an event handler refers to the element that received the event.",
                            "'this' in an event handler refers to the event object."
                        ],
                        "correct_answers": ["'this' in an event handler refers to the element that received the event."]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Reflect on how the value of 'this' changes with the context of an event handler.",
                        "question_description": "'In a click event handler, 'this' will refer to the button or element that was clicked.'",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "“this” in arrow functions",
                "theories_list" : [
                    "The keyword this when used in an arrow function refers to the parent object."
                ],
                "description" : "Lexically binds 'this' from the surrounding scope, not creating its own 'this' context.",
                "url" : "https://www.w3schools.com/js/js_arrow_function.asp",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how `this` behaves differently in arrow functions compared to regular functions.",
                        "question_description": "In an arrow function, what does the keyword `this` refer to?",
                        "options": [
                            "The arrow function itself",
                            "The global object",
                            "The parent object or surrounding context",
                            "The event object"
                        ],
                        "correct_answers": ["The parent object or surrounding context"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about how arrow functions treat `this` differently compared to traditional functions.",
                        "question_description": "'Arrow functions have their own `this` context, independent of the surrounding scope.'",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Remember that arrow functions do not create their own `this` context.",
                        "question_description": "In an arrow function, 'this' refers to the __________.",
                        "options": ["global object", "function itself", "parent object or surrounding context", "event object"],
                        "correct_answers": ["parent object or surrounding context"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how `this` behaves inside different types of functions.",
                        "question_description": "Which statement about `this` in arrow functions is correct?",
                        "options": [
                            "'this' in an arrow function is determined by the object that calls the function.",
                            "'this' in an arrow function is inherited from the surrounding lexical scope.",
                            "'this' in an arrow function refers to the global object.",
                            "'this' in an arrow function is always `undefined`."
                        ],
                        "correct_answers": ["'this' in an arrow function is inherited from the surrounding lexical scope."]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider how `this` is treated in various function contexts.",
                        "question_description": "'In an arrow function, `this` is bound to the scope in which the arrow function is defined.'",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "Explicit binding",
                "theories_list" : [
                    "Explicit binding is when you use the call or apply methods to explicitly set the value of this in a function. Explicit Binding can be applied using call(), apply(), and bind()."
                ],
                "description" : "Using 'call()', 'apply()', or 'bind()' to explicitly set the value of this.",
                "url" : "https://medium.com/@msinha2801/explicit-binding-rule-for-this-keyword-in-js-712405b0a11",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how 'call' and 'apply' methods set the value of 'this'.",
                        "question_description": "Which methods are used for explicit binding in JavaScript?",
                        "options": [
                            "call()",
                            "apply()",
                            "bind()",
                            "All of the above"
                        ],
                        "correct_answers": ["All of the above"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about how 'this' is set in functions using 'call' or 'apply'.",
                        "question_description": "'Using call() or apply() methods allows you to explicitly set the value of this in a function.'",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Remember the three methods used for explicit binding.",
                        "question_description": "Explicit binding can be applied using __________, __________, and __________ methods.",
                        "options": ["call()", "apply()", "bind()"],
                        "correct_answers": ["call()", "apply()", "bind()"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how 'bind' differs from 'call' and 'apply'.",
                        "question_description": "What is a key difference between bind() and call()/apply() methods?",
                        "options": [
                            "bind() immediately calls the function, while call()/apply() create a new function",
                            "call() and apply() immediately call the function, while bind() creates a new function",
                            "bind() sets 'this' to null, while call()/apply() set 'this' explicitly",
                            "There is no difference"
                        ],
                        "correct_answers": ["call() and apply() immediately call the function, while bind() creates a new function"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the timing of function execution when using 'bind'.",
                        "question_description": "'The bind() method creates a new function with 'this' bound to a specified value, but does not call the function immediately.'",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Asynchronous JavaScript I",
        "description_short" : "This lesson covers the basics of asynchronous programming, including callbacks, promises, and the async/await syntax, which are essential for handling asynchronous operations.",
        "description_long" : "Asynchronous programming is a technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished. Once that task has finished, your program is presented with the result.\nMany functions provided by browsers, especially the most interesting ones, can potentially take a long time, and therefore, are asynchronous. For example:\n\n- Making HTTP requests using fetch()\n- Accessing a user’s camera or microphone using getUserMedia()\n- Asking a user to select files using showOpenFilePicker()\n\nSo even though you may not have to implement your own asynchronous functions very often, you are very likely to need to use them correctly.",
        "lessons" : [
            {
                "title" : "Callbacks",
                "theories_list" : [
                    "A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
                    "Callback hell\n\nThe callback hell is when we try to write asynchronous JavaScript in a way where execution happens visually from top to bottom, creating a code that has a pyramid shape with many }) at the end."
                ],
                "description" : "Functions passed as arguments to be executed after the completion of an asynchronous operation.",
                "url" : "https://javascript.info/callbacks",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the purpose of passing a function as an argument.",
                        "question_description": "What is a callback function?",
                        "options": [
                            "A function that is called at the end of a script",
                            "A function passed into another function as an argument",
                            "A function that runs automatically when a page loads",
                            "A function used to handle errors"
                        ],
                        "correct_answers": ["A function passed into another function as an argument"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the structure and readability of nested callbacks.",
                        "question_description": "'Callback hell refers to the difficulty in reading and maintaining code with many nested callback functions.'",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Remember the key concept of callbacks in asynchronous operations.",
                        "question_description": "A __________ function is passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
                        "options": ["callback"],
                        "correct_answers": ["callback"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the visual structure of nested callbacks.",
                        "question_description": "What is 'callback hell'?",
                        "options": [
                            "An error that occurs when a callback function is not defined",
                            "A code structure where multiple nested callbacks create a pyramid shape",
                            "A situation where callbacks are not executed in order",
                            "A method to handle errors in asynchronous functions"
                        ],
                        "correct_answers": ["A code structure where multiple nested callbacks create a pyramid shape"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the sequence of execution in asynchronous operations.",
                        "question_description": "'Callback functions are used to ensure that a certain code runs after the completion of an asynchronous operation.'",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "Promises",
                "theories_list" : [
                    "Promises are a much better way to work with asynchronous code in JavaScript than the old and error-prone callback approach. They were introduced into JavaScript with ECMAScript 6. Using promises, we can manage extremely complex asynchronous code with rigorous error-handling setup, write code in a more or less synchronous style, and keep ourselves from running into the so-called callback hell.",
                    "Async/Await\n\nasync/await is a special syntax to work with promises in a more comfortable fashion. We use async keyword to declare a async function that return a Promise, and the await keyword makes a function wait for a Promise."
                ],
                "description" : "Objects representing the eventual completion or failure of an asynchronous operation, allowing for chained then and catch methods.",
                "url" : "https://www.codeguage.com/courses/advanced-js/promises-introduction",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how promises improve asynchronous code handling.",
                        "question_description": "What are promises used for in JavaScript?",
                        "options": [
                            "To handle synchronous operations",
                            "To manage asynchronous operations more effectively",
                            "To simplify loops",
                            "To perform mathematical calculations"
                        ],
                        "correct_answers": ["To manage asynchronous operations more effectively"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the nature of promises in handling success and failure.",
                        "question_description": "'A promise can be either fulfilled, rejected, or pending.'",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Remember the keywords used with promises for better syntax.",
                        "question_description": "The __________ keyword is used to declare a function that returns a promise, and the __________ keyword is used to wait for the promise.",
                        "options": ["async, await"],
                        "correct_answers": ["async, await"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the primary benefit of using promises over callbacks.",
                        "question_description": "Which of the following is a primary benefit of using promises?",
                        "options": [
                            "They can only handle one asynchronous operation at a time",
                            "They make asynchronous code easier to read and maintain",
                            "They eliminate the need for any error handling",
                            "They make JavaScript code run faster"
                        ],
                        "correct_answers": ["They make asynchronous code easier to read and maintain"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the interaction between promises and the async/await syntax.",
                        "question_description": "'The async/await syntax is a way to work with promises more comfortably.'",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            },
            {
                "title" : "setTimeout",
                "theories_list" : [
                    "The setTimeout runs a function after the specified period expires. Times are declared in milliseconds."
                ],
                "description" : "A function that executes a specified function after a set delay.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/API/setTimeout",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the unit of time used in setTimeout.",
                        "question_description": "In which unit of time is the delay specified in the setTimeout function?",
                        "options": [
                            "Seconds",
                            "Milliseconds",
                            "Minutes",
                            "Hours"
                        ],
                        "correct_answers": ["Milliseconds"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the execution behavior of setTimeout.",
                        "question_description": "'setTimeout' immediately executes the function it is called with.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Remember the arguments that setTimeout takes.",
                        "question_description": "The __________ function in JavaScript runs a specified function after a set delay.",
                        "options": ["setTimeout"],
                        "correct_answers": ["setTimeout"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how setTimeout is used in practice.",
                        "question_description": "Which of the following correctly uses setTimeout to log 'Hello, world!' after 2 seconds?",
                        "options": [
                            "setTimeout('Hello, world!', 2000);",
                            "setTimeout(() => console.log('Hello, world!'), 2000);",
                            "setTimeout(console.log, 2000, 'Hello, world!');",
                            "setTimeout('console.log(Hello, world!)', 2000);"
                        ],
                        "correct_answers": ["setTimeout(() => console.log('Hello, world!'), 2000);"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about whether setTimeout blocks code execution.",
                        "question_description": "'setTimeout' blocks further code execution until the timeout is complete.",
                        "options": [],
                        "correct_answers": ["false"]
                    }
                ]
            },
            {
                "title" : "setInterval",
                "theories_list" : [
                    "The setInterval() method helps us to repeatedly execute a function after a fixed delay. It returns a unique interval ID which can later be used by the clearInterval() method, which stops further repeated execution of the function.",
                    "setInterval() is similar to setTimeout, with a difference. Instead of running the callback function once, it will run it forever, at the specific time interval you specify (in milliseconds)."
                ],
                "description" : "A function that repeatedly executes a specified function at fixed time intervals.",
                "url" : "https://www.geeksforgeeks.org/what-is-setinterval-in-javascript/",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the unit of time used in setInterval.",
                        "question_description": "In which unit of time is the interval specified in the setInterval function?",
                        "options": [
                            "Seconds",
                            "Milliseconds",
                            "Minutes",
                            "Hours"
                        ],
                        "correct_answers": ["Milliseconds"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about how setInterval executes the function.",
                        "question_description": "'setInterval' will run a callback function only once.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Remember the function used to clear an interval.",
                        "question_description": "The __________ method stops further repeated execution of the function set by setInterval.",
                        "options": ["clearInterval"],
                        "correct_answers": ["clearInterval"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider how setInterval is used in practice.",
                        "question_description": "Which of the following correctly uses setInterval to log 'Hello, world!' every 2 seconds?",
                        "options": [
                            "setInterval('Hello, world!', 2000);",
                            "setInterval(() => console.log('Hello, world!'), 2000);",
                            "setInterval(console.log, 2000, 'Hello, world!');",
                            "setInterval('console.log(Hello, world!)', 2000);"
                        ],
                        "correct_answers": ["setInterval(() => console.log('Hello, world!'), 2000);"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about how setInterval and setTimeout differ.",
                        "question_description": "'setInterval' is used to execute a function once after a specified delay.",
                        "options": [],
                        "correct_answers": ["false"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Working with APIs",
        "description_short" : "Students learn how to interact with external APIs using JavaScript, including making HTTP requests, handling responses, and processing data from APIs.",
        "description_long" : "When working with remote APIs, you need a way to interact with those APIs. Modern JavaScript provides two native ways to send HTTP requests to remote servers, XMLHttpRequest and Fetch.",
        "lessons" : [
            {
                "title" : "XMLHttpRequest",
                "theories_list" : [
                    "XMLHttpRequest (XHR) is a built-in browser object that can be used to interact with server. XHR allows you to update data without having to reload a web page. Despite the word XML in its name, XHR not only used to retrieve data with XML format, we can use it with any type of data, like JSON, file(s), and much more."
                ],
                "description" : "An older JavaScript API for making HTTP requests to interact with servers.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the flexibility of data formats supported by XHR.",
                        "question_description": "Which of the following data formats can be retrieved using XMLHttpRequest?",
                        "options": [
                            "XML",
                            "JSON",
                            "Text",
                            "All of the above"
                        ],
                        "correct_answers": ["All of the above"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the primary feature of XHR related to page reloads.",
                        "question_description": "XMLHttpRequest allows data to be updated without reloading the web page.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the types of methods used in HTTP requests.",
                        "question_description": "The two common HTTP methods used with XMLHttpRequest are __________ and __________.",
                        "options": ["GET", "POST"],
                        "correct_answers": ["GET", "POST"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the lifecycle of an XHR request.",
                        "question_description": "Which event handler is used to detect changes in the readyState of an XMLHttpRequest?",
                        "options": [
                            "onload",
                            "onerror",
                            "onreadystatechange",
                            "ontimeout"
                        ],
                        "correct_answers": ["onreadystatechange"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the relation between XHR and the XML format indicated in its name.",
                        "question_description": "XMLHttpRequest is used exclusively to retrieve XML data.",
                        "options": [],
                        "correct_answers": ["false"]
                    }
                ]
            },
            {
                "title" : "Fetch",
                "theories_list" : [
                    "The fetch() method in JavaScript is used to request to the server and load the information on the webpages. The request can be of any APIs that return the data of the format JSON or XML. This method returns a promise."
                ],
                "description" : "A modern JavaScript API for making network requests, returning promises for easier asynchronous handling.",
                "url" : "https://javascript.info/fetch",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the type of object returned by fetch().",
                        "question_description": "What does the fetch() method return?",
                        "options": [
                            "A callback",
                            "A promise",
                            "An array",
                            "A function"
                        ],
                        "correct_answers": ["A promise"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the nature of fetch() in handling API responses.",
                        "question_description": "The fetch() method can be used to request data in JSON format.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the common types of data formats used with fetch().",
                        "question_description": "The fetch() method can request data in formats such as __________ and __________.",
                        "options": ["JSON", "XML"],
                        "correct_answers": ["JSON", "XML"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the steps to handle the response from a fetch request.",
                        "question_description": "Which method is commonly used to parse the response from a fetch request as JSON?",
                        "options": [
                            "response.text()",
                            "response.json()",
                            "response.parse()",
                            "response.data()"
                        ],
                        "correct_answers": ["response.json()"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider how promises handle success and failure.",
                        "question_description": "The fetch() method returns a promise that can be handled using then() and catch() methods.",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Classes",
        "description_short" : "This lesson introduces classes in JavaScript, including class declarations, constructors, inheritance, and methods, providing a foundation for object-oriented programming.",
        "description_long" : "Classes in JavaScript provide a blueprint for creating objects with predefined properties and methods. Using the 'class' keyword, developers can define constructor functions for initializing new objects and include methods to define object behaviors.",
        "lessons" : [
            {
                "title" : "Classes",
                "theories_list" : [
                    "Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but have some syntax and semantics that are not shared with ES5 class-like semantics."
                ],
                "description" : "Templates for creating objects with predefined properties and methods, using the 'class' keyword.",
                "url" : "https://javascript.info/classes",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the keyword used to define a class in JavaScript.",
                        "question_description": "What keyword is used to define a class in JavaScript?",
                        "options": [
                            "function",
                            "class",
                            "object",
                            "prototype"
                        ],
                        "correct_answers": ["class"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the relationship between classes and prototypes in JavaScript.",
                        "question_description": "Classes in JavaScript are built on prototypes.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider what classes encapsulate.",
                        "question_description": "Classes encapsulate __________ with code to work on that __________.",
                        "options": ["data", "data"],
                        "correct_answers": ["data", "data"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about how to create an instance of a class.",
                        "question_description": "Which keyword is used to create an instance of a class?",
                        "options": [
                            "create",
                            "new",
                            "instance",
                            "build"
                        ],
                        "correct_answers": ["new"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the syntax and semantics of ES6 classes compared to ES5.",
                        "question_description": "ES6 classes have the same syntax and semantics as ES5 class-like semantics.",
                        "options": [],
                        "correct_answers": ["false"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "INTERMEDIATE",
        "title" : "Modules in JavaScript",
        "description_short" : "Students learn about modules in JavaScript, including how to organize code into reusable modules using import and export statements, which helps in maintaining large codebases.",
        "description_long" : "Modules encapsulate all sorts of code like functions and variables and expose all this to other files. Generally, we use it to break our code into separate files to make it more maintainable. They were introduced into JavaScript with ECMAScript 6.",
        "lessons" : [
            {
                "title" : "Modules in JavaScript",
                "theories_list" : [
                    "CommonJS:\n\nCommonJS modules are the original way to package JavaScript code for Node.js. Node.js also supports the ESModules standard used by browsers and other JavaScript runtimes, but CJS is still widely used in backend Node.js applications. Sometimes these modules will be written with a .cjs extension.",
                    "ESModules:\n\nESModules is a standard that was introduced with ES6 (2015). The idea was to standardize how JS modules work and implement these features in browsers. This standard is widely used with frontend frameworks such as react and can also be used in the backend with Node.js. Sometimes these modules will be written with a .mjs extension."
                ],
                "description" : "Modules encapsulate all sorts of code like functions and variables and expose all this to other files. Generally, we use it to break our code into separate files to make it more maintainable. They were introduced into JavaScript with ECMAScript 6.",
                "url" : "https://javascript.info/modules-intro",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Consider the module system used primarily in Node.js.",
                        "question_description": "Which module system is the original way to package JavaScript code for Node.js?",
                        "options": [
                            "CommonJS",
                            "ESModules",
                            "AMD",
                            "UMD"
                        ],
                        "correct_answers": ["CommonJS"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the extension used for CommonJS modules.",
                        "question_description": "CommonJS modules are sometimes written with a .cjs extension.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "Consider the standard introduced with ES6 for modules.",
                        "question_description": "__________ is a standard introduced with ES6 to standardize how JS modules work.",
                        "options": ["ESModules"],
                        "correct_answers": ["ESModules"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Think about the module system widely used with frontend frameworks like React.",
                        "question_description": "Which module system is widely used with frontend frameworks such as React?",
                        "options": [
                            "CommonJS",
                            "ESModules",
                            "AMD",
                            "UMD"
                        ],
                        "correct_answers": ["ESModules"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Think about the extension used for ESModules.",
                        "question_description": "ESModules are sometimes written with a .mjs extension.",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "ADVANCED",
        "title" : "Equality Comparisons II",
        "description_short" : "This is the level 2 of Equality Comparisons course",
        "description_long": "This lesson covers advanced equality algorithms, including isLooselyEqual, isStrictlyEqual, SameValueZero, and SameValue, and their differences in handling type conversion and comparison.",
        "lessons" : [
            {
                "title" : "Equality algorithms",
                "theories_list" : [
                    "Equality algorithms are used to perform equality comparisons of values or variables in JavaScript. Each equality algorithm works slightly differently, and the one you use depends on the type of comparison you want to make.",
                    "“isLooselyEqual”\n\nisLooselyEqual checks whether its two operands are equal, returning a Boolean result. It attempts to convert and compare operands that are of different types.",
                    "“isStrictlyEqual”\n\nisStrictlyEqual checks whether its two operands are equal, returning a Boolean result. It always considers operands of different types to be different.",
                    "“Same zero zero”\n\nSameValueZero equality determines whether two values are functionally identical in all contexts with +0 and -0 are also considered equal.",
                    "“Same value”\n\nSameValue equality determines whether two values are functionally identical in all contexts."
                ],
                "description" : "Methods used by JavaScript to determine if two values are equal, including strict equality, loose equality, and SameValue algorithms.",
                "url" : "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This type of equality conversion converts operands to a common type before comparison.",
                        "question_description": "Which equality algorithm performs type conversion before comparing two values?",
                        "options": [
                            "isLooselyEqual",
                            "isStrictlyEqual",
                            "Same zero zero",
                            "Same value"
                        ],
                        "correct_answers": ["isLooselyEqual"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Consider the strictness of this equality check.",
                        "question_description": "The isStrictlyEqual algorithm considers operands of different types to be different.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "This equality check considers +0 and -0 to be equal.",
                        "question_description": "__________ equality determines whether two values are functionally identical in all contexts, with +0 and -0 considered equal.",
                        "options": ["Same zero zero"],
                        "correct_answers": ["Same zero zero"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This algorithm does not involve type conversion and compares values directly.",
                        "question_description": "Which equality algorithm determines if two values are functionally identical in all contexts without type conversion?",
                        "options": [
                            "isLooselyEqual",
                            "isStrictlyEqual",
                            "Same zero zero",
                            "Same value"
                        ],
                        "correct_answers": ["Same value"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "This equality algorithm performs comparison with consideration for different types.",
                        "question_description": "SameValueZero equality considers +0 and -0 to be different.",
                        "options": [],
                        "correct_answers": ["false"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "ADVANCED",
        "title" : "Asynchronous JavaScript II",
        "description_short" : "This is the level 2 of Asynchronous JavaScript course",
        "description_long" : "Building on the basics, this lesson covers advanced topics in asynchronous programming, such as error handling in async code, working with multiple promises, and using async iterators.",
        "lessons" : [
            {
                "title" : "Event Loop",
                "theories_list" : [
                    "The Event Loop is one of the most important aspects to understand about Node.js. Why is this so important? Because it explains how Node.js can be asynchronous and have non-blocking I/O, it explains the “killer feature” of Node.js, which made it this successful."
                ],
                "description" : "A mechanism that allows JavaScript to perform non-blocking operations by managing the execution of multiple tasks, callbacks, and handling asynchronous events.",
                "url" : "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This mechanism helps manage tasks and callbacks in JavaScript without blocking execution.",
                        "question_description": "What is the primary function of the Event Loop in JavaScript?",
                        "options": [
                            "Managing synchronous operations",
                            "Handling non-blocking I/O operations",
                            "Executing code in parallel threads",
                            "Compiling JavaScript code to machine code"
                        ],
                        "correct_answers": ["Handling non-blocking I/O operations"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "The Event Loop allows for blocking I/O operations in JavaScript.",
                        "question_description": "The Event Loop in JavaScript allows for blocking I/O operations.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "This term describes the queue where tasks are managed for execution in JavaScript.",
                        "question_description": "The Event Loop manages a queue of tasks called the ___________.",
                        "options": ["task queue"],
                        "correct_answers": ["task queue"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This part of JavaScript's architecture helps handle asynchronous events.",
                        "question_description": "Which of the following best describes the Event Loop's role in JavaScript?",
                        "options": [
                            "Compiling code",
                            "Managing task execution",
                            "Handling CPU-intensive calculations",
                            "Performing garbage collection"
                        ],
                        "correct_answers": ["Managing task execution"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "JavaScript executes tasks from the Event Queue one at a time.",
                        "question_description": "The Event Loop processes tasks from the event queue simultaneously.",
                        "options": [],
                        "correct_answers": ["false"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "ADVANCED",
        "title" : "Iterators and Generators",
        "description_short" : "Students learn about iterators and generators in JavaScript, including how to create and use them to control the iteration behavior of objects and manage asynchronous data streams.",
        "description_long" : "In JavaScript, iterators and generators provide powerful tools for managing and iterating over sequences of values. These features, introduced with ECMAScript 6 (ES6), enhance the way you can work with collections and sequences in your code.",
        "lessons" : [
            {
                "title" : "Iterators and Generators",
                "theories_list" : [
                    "Iterators and generators, introduced into JavaScript with ECMAScript 6, represent an extremely useful concept related to iteration in the language. Iterators are objects, abiding by the iterator protocol, that allows us to easily iterate over a given sequence in various ways, such as using the for...of loop. Generators, on the other hand, allow us to use functions and the yield keyword to easily define iterable sequences that are iterators as well."
                ],
                "description" : "Iterators provide a standard way to produce a sequence of values, while generators, defined with 'function*', allow functions to yield multiple values over time, enabling more control over iteration.",
                "url" : "https://www.codeguage.com/courses/advanced-js/iteration-introduction",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This type of function can yield multiple values over time and allows more control over iteration.",
                        "question_description": "Which of the following describes a generator function?",
                        "options": [
                            "A function that returns a single value",
                            "A function that can only be called once",
                            "A function defined with `function*` that can yield multiple values",
                            "A function that performs asynchronous operations"
                        ],
                        "correct_answers": ["A function defined with `function*` that can yield multiple values"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Generators can pause and resume execution.",
                        "question_description": "Generators in JavaScript can pause execution and resume later.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "This object is used to conform to the iterator protocol in JavaScript.",
                        "question_description": "An object that conforms to the iterator protocol must have a `next` method that returns an object with `value` and `______` properties.",
                        "options": ["done"],
                        "correct_answers": ["done"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "To iterate over a sequence of values using a generator, you use this loop.",
                        "question_description": "Which loop can be used to iterate over a sequence of values produced by an iterator?",
                        "options": [
                            "forEach",
                            "for...of",
                            "for...in",
                            "while"
                        ],
                        "correct_answers": ["for...of"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Generators can only be used with synchronous code.",
                        "question_description": "Generators in JavaScript can only be used with synchronous code.",
                        "options": [],
                        "correct_answers": ["false"]
                    }
                ]
            }
        ]
    },
    {
        "level" : "ADVANCED",
        "title" : "Memory Management",
        "description_short" : "This lesson covers memory management in JavaScript, including how the garbage collector works, memory leaks, and best practices for efficient memory usage.",
        "description_long" : "Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don’t need to worry about memory management.",
        "lessons" : [
            {
                "title" : "Memory lifecycle",
                "theories_list" : [
                    "Regardless of the programming language, the memory life cycle is pretty much always the same:\n\n- Allocate the memory you need\n- Use the allocated memory (read, write)\n- Release the allocated memory when it is not needed anymore",
                    "The second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript."
                ],
                "description" : "The process of allocating, using, and releasing memory in an application to ensure efficient use of resources.",
                "url" : "https://medium.com/swlh/the-lifecycle-of-memory-in-javascript-5b5bffc5ff4c",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "The step where you no longer need the memory you allocated is called this.",
                        "question_description": "Which step in the memory lifecycle involves deallocating memory that is no longer needed?",
                        "options": [
                            "Allocate",
                            "Use",
                            "Release",
                            "Initialize"
                        ],
                        "correct_answers": ["Release"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Memory management is automatic in high-level languages like JavaScript.",
                        "question_description": "Memory management in high-level languages like JavaScript is typically handled automatically by garbage collection.",
                        "options": [],
                        "correct_answers": ["true"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "The process of __________ involves deallocating memory that is no longer needed.",
                        "question_description": "The process of __________ involves deallocating memory that is no longer needed.",
                        "options": ["Release"],
                        "correct_answers": ["Release"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "Memory management tasks in low-level languages are typically this type.",
                        "question_description": "In low-level languages, memory management tasks like allocation and release are typically _____.",
                        "options": [
                            "Implicit",
                            "Automatic",
                            "Manual",
                            "Automatic and Implicit"
                        ],
                        "correct_answers": ["Manual"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Automatic garbage collection is not a feature of high-level languages.",
                        "question_description": "Automatic garbage collection is not a feature of high-level languages like JavaScript.",
                        "options": [],
                        "correct_answers": ["false"]
                    }
                ]
            },
            {
                "title" : "Garbage Collection",
                "theories_list" : [
                    "Memory management in JavaScript is performed automatically and invisibly to us. We create primitives, objects, functions… All that takes memory. The main concept of memory management in JavaScript is reachability."
                ],
                "description" : "An automatic process in JavaScript that reclaims memory occupied by objects no longer in use, preventing memory leaks and optimizing performance.",
                "url" : "https://javascript.info/garbage-collection",
                "questions": [
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This is a key concept used to determine which objects are eligible for garbage collection.",
                        "question_description": "What is the primary concept used to determine which objects are eligible for garbage collection in JavaScript?",
                        "options": [
                            "Scope",
                            "Reachability",
                            "Visibility",
                            "Accessibility"
                        ],
                        "correct_answers": ["Reachability"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Garbage collection requires manual intervention in JavaScript.",
                        "question_description": "Garbage collection in JavaScript requires manual intervention to reclaim memory.",
                        "options": [],
                        "correct_answers": ["false"]
                    },
                    {
                        "question_type": "FILL_IN_THE_BLANKS",
                        "hint": "The process that reclaims memory occupied by objects no longer in use is known as __________.",
                        "question_description": "The process that reclaims memory occupied by objects no longer in use is known as __________.",
                        "options": ["Garbage Collection"],
                        "correct_answers": ["Garbage Collection"]
                    },
                    {
                        "question_type": "MULTIPLE_CHOICE",
                        "hint": "This type of memory management is performed automatically in JavaScript.",
                        "question_description": "In JavaScript, memory management, including the reclamation of unused memory, is performed through __________.",
                        "options": [
                            "Manual Allocation",
                            "Explicit Deallocation",
                            "Garbage Collection",
                            "Reference Counting"
                        ],
                        "correct_answers": ["Garbage Collection"]
                    },
                    {
                        "question_type": "TRUE_FALSE",
                        "hint": "Garbage collection in JavaScript helps prevent memory leaks.",
                        "question_description": "Garbage collection in JavaScript helps prevent memory leaks and optimize performance.",
                        "options": [],
                        "correct_answers": ["true"]
                    }
                ]
            }
        ]
    }
]